{
  "address": "0x66C8a06167c609B7B6705e083da05B2B7c537100",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_windowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "NewBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "REWARD_PER_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "betListLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settlementPrice",
          "type": "uint256"
        }
      ],
      "name": "betResult",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolDown",
          "type": "uint256"
        }
      ],
      "name": "calculateTokenReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "computeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        }
      ],
      "name": "getPoolValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserBetList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "getWindowBetPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_windowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deployTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getWindowNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_windowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_currentTimestamp",
          "type": "uint256"
        }
      ],
      "name": "getWindowStartingTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startingTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "downValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolDown",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "res",
          "type": "uint8"
        }
      ],
      "name": "settleBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "windowDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "windowPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentWindow",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "initialPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "finalPrice",
          "type": "uint256"
        }
      ],
      "name": "windowStatus",
      "outputs": [
        {
          "internalType": "enum BinaryBet.WindowStatus",
          "name": "status",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x006b1157ae68f2b28c0ed34e4fd5df84e4c2187ebe486a624687e5cc72a11e49",
  "receipt": {
    "to": null,
    "from": "0xb9249FC2c91232926243a7b70397f5775286a1a6",
    "contractAddress": "0x66C8a06167c609B7B6705e083da05B2B7c537100",
    "transactionIndex": 0,
    "gasUsed": "1344298",
    "logsBloom": "0x
    "blockHash": "0xddcd262277fd8529b8e67f3c6e64dc9872980d1695942e199ec3a6a731a76ad5",
    "transactionHash": "0x006b1157ae68f2b28c0ed34e4fd5df84e4c2187ebe486a624687e5cc72a11e49",
    "logs": [],
    "blockNumber": 4433022,
    "cumulativeGasUsed": "1344298",
    "status": 1,
    "byzantium": true
  },
  "args": [
    300,
    2,
    "0x5498BB86BC934c8D34FDA08E81D444153d0D06aD",
    "0x3903f35D963e700c117A5A332e2982fa3FAE27db",
    "0xEC9810d9F10BAA8Bce7984881CE130B59B4c9Da4",
    332
  ],
  "solcInputHash": "3cd573c58f30b1a5866dd999ed76f733",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_windowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"REWARD_PER_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"betListLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementPrice\",\"type\":\"uint256\"}],\"name\":\"betResult\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDown\",\"type\":\"uint256\"}],\"name\":\"calculateTokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"computeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betFee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"}],\"name\":\"getPoolValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserBetList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"getWindowBetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deployTimestamp\",\"type\":\"uint256\"}],\"name\":\"getWindowNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_currentTimestamp\",\"type\":\"uint256\"}],\"name\":\"getWindowStartingTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startingTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"downValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"res\",\"type\":\"uint8\"}],\"name\":\"settleBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"windowDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"windowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentWindow\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"initialPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"finalPrice\",\"type\":\"uint256\"}],\"name\":\"windowStatus\",\"outputs\":[{\"internalType\":\"enum BinaryBet.WindowStatus\",\"name\":\"status\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BinaryBet.sol\":\"BinaryBet\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BinToken.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\ncontract BinToken is ERC20 {\\n    //using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"KITTY\\\";\\n    string public constant SYMBOL = \\\"KITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY =\\n        100000000 * (10**uint256(DECIMALS));\\n    uint256 public constant IDO_SUPPLY =\\n        12500000 * (10**uint256(DECIMALS));\\n\\n    mapping(address => mapping(address => uint256)) allowed;\\n\\n    constructor(address ido) ERC20(NAME, SYMBOL) {\\n        _mint(ido, IDO_SUPPLY);\\n        _mint(msg.sender, INITIAL_SUPPLY - IDO_SUPPLY);\\n    }\\n}\\n\",\"keccak256\":\"0xc41bc4caa22127ea48e686a90bf656737be43cda0a8ceedb8e8e2101792243d2\",\"license\":\"Apache-2.0\"},\"contracts/BinaryBet.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\nimport \\\"./BinaryStaking.sol\\\";\\n\\ncontract BinaryBet {\\n    //Structs and enums\\n    enum BetSide {\\n        down,\\n        up\\n    }\\n    enum BetResult {\\n        down,\\n        up,\\n        tie\\n    }\\n    enum WindowStatus {\\n        notFinalized,\\n        waitingPrice,\\n        failedUpdate,\\n        finalized\\n    }\\n\\n    struct Pool {\\n        uint256 downValue;\\n        uint256 upValue;\\n    }\\n\\n    //Other contracts interactions\\n    AggregatorV3Interface internal priceFeed;\\n    BinToken immutable token;\\n    BinaryStaking immutable staking;\\n    address payable immutable stakingAddress;\\n\\n    //Betting variables\\n    uint256 public immutable REWARD_PER_WINDOW;\\n    mapping(uint256 => Pool) public pools; //windowNumber => Pool\\n    uint256 public immutable fee;\\n    uint256 public immutable deployTimestamp;\\n\\n\\n    //Window management\\n    uint256 public immutable windowDuration; //in epoch timestamp\\n    mapping(uint256 => uint256) public windowPrice; /*first price collection\\n                                                      at the window.\\n                                                     */\\n    //User variables\\n    struct User {\\n        mapping(uint256 => Pool) stake;\\n        uint256[] bets;\\n    }\\n    mapping(address => User) user;\\n\\n    //EVENTS\\n    event NewBet(\\n        address indexed user,\\n        uint256 indexed windowNumber,\\n        uint256 value,\\n        uint8 side\\n    );\\n    event BetSettled(\\n        uint256 indexed windowNumber,\\n        address indexed user,\\n        uint256 gain\\n    );\\n    event PriceUpdated(uint256 indexed windowNumber, uint256 price);\\n\\n    constructor(\\n        uint256 _windowDuration, \\n        uint256 _fee,\\n        address aggregator,\\n        address stakingContract,\\n        address tokenContract,\\n        uint256 reward\\n    ) {\\n        require(_fee <= 100);\\n        priceFeed = AggregatorV3Interface(aggregator);\\n        deployTimestamp = block.timestamp;\\n        windowDuration = _windowDuration;\\n\\n        fee = _fee;\\n\\n        stakingAddress = payable(stakingContract);\\n        staking = BinaryStaking(stakingAddress);\\n        token = BinToken(tokenContract);\\n\\n        REWARD_PER_WINDOW = reward * 1e18;\\n    }\\n\\n    function placeBet(uint8 side) external payable {\\n        require(msg.value > 0, \\\"Only strictly positive values\\\");\\n        updatePrice();\\n        updateBalance(msg.sender);\\n\\n        uint256 windowNumber = getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            deployTimestamp\\n        );\\n\\n        User storage sender = user[msg.sender];\\n        if (sender.bets.length == 0 ||\\n            windowNumber != sender.bets[sender.bets.length - 1]) {\\n            /*\\n               Only adds to the list if its the first user bet on the window.\\n               If length is zero, the code only evaluates the first condition,\\n               avoiding the possible underflow length - 1.\\n            */\\n            sender.bets.push(windowNumber);\\n        }\\n\\n        //Update the user stake and pool for the window.\\n        if (BetSide(side) == BetSide.up) {\\n            sender.stake[windowNumber].upValue += msg.value;\\n            pools[windowNumber].upValue += msg.value;\\n        }\\n        else {\\n            sender.stake[windowNumber].downValue += msg.value;\\n            pools[windowNumber].downValue += msg.value;\\n        }\\n\\n        emit NewBet(msg.sender, windowNumber, msg.value, side);\\n    }\\n\\n    function updateBalance(address _user) public {\\n        User storage userData = user[_user];\\n        if (userData.bets.length == 0) {\\n            //No bets to settle\\n            return;\\n        }\\n\\n        uint256 totalGain = 0;\\n        uint256 totalRewards = 0;\\n        uint256 accumulatedFees = 0;\\n        for (uint256 i = userData.bets.length; i > 0; i--) {\\n            /*Maximum number of itens in list is 2, when the user bets\\n              on 2 subsequent windows and the first window is not yet settled.\\n            */\\n            uint256 window = userData.bets[i - 1];\\n            uint256 currentWindow = getWindowNumber(\\n                block.timestamp,\\n                windowDuration,\\n                deployTimestamp\\n            );\\n            (\\n                uint256 referencePrice,\\n                uint256 settlementPrice\\n            ) = getWindowBetPrices(window);\\n\\n            WindowStatus status = windowStatus(\\n                window,\\n                currentWindow,\\n                referencePrice,\\n                settlementPrice\\n            );\\n            if (\\n                status == WindowStatus.notFinalized ||\\n                status == WindowStatus.waitingPrice\\n            ) {\\n                continue;\\n            }\\n\\n            uint8 result;\\n            if (status == WindowStatus.finalized) {\\n                result = betResult(referencePrice, settlementPrice);\\n            } else if (status == WindowStatus.failedUpdate) {\\n                result = 2;\\n            }\\n\\n            //Remove window from list of unsettled bets.\\n            userData.bets[i - 1] = userData.bets[\\n                userData.bets.length - 1\\n            ];\\n            userData.bets.pop();\\n\\n            Pool memory stake = userData.stake[window];\\n            Pool memory pool = pools[window];\\n            (uint256 windowGain, uint256 fees) = settleBet(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue,\\n                result\\n            );\\n\\n            totalGain += windowGain;\\n            accumulatedFees += fees;\\n\\n            //KITTY token rewards\\n            totalRewards += calculateTokenReward(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue\\n            );\\n\\n            emit BetSettled(window, _user, windowGain);\\n        }\\n\\n        if (totalGain > 0) {\\n            payable(_user).transfer(totalGain);\\n        }\\n\\n        if (totalRewards > 0) {\\n            transferRewards(_user, totalRewards);\\n        }\\n\\n        if (accumulatedFees > 0) {\\n            staking.receiveFunds{value: accumulatedFees}();\\n        }\\n    }\\n\\n    function windowStatus(\\n        uint256 window,\\n        uint256 currentWindow,\\n        uint256 initialPrice,\\n        uint256 finalPrice\\n    ) public pure returns (WindowStatus status) {\\n        if (currentWindow < window + 2) {\\n            //window not yet settled\\n            return WindowStatus.notFinalized;\\n        } else if (currentWindow < window + 3 && finalPrice == 0) {\\n            //price not updated but update still possible.\\n            return WindowStatus.waitingPrice;\\n        } else if (initialPrice == 0 || finalPrice == 0) {\\n            return WindowStatus.failedUpdate;\\n        } else {\\n            return WindowStatus.finalized;\\n        }\\n    }\\n\\n    function transferRewards(address user, uint256 amount) internal {\\n        if (token.balanceOf(address(this)) >= amount) {\\n            token.transfer(user, amount);\\n        } else {\\n            token.transfer(user, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function settleBet(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown,\\n        uint8 res\\n    ) public view returns (uint256 gain, uint256 fees) {\\n        BetResult result = BetResult(res);\\n        uint256 poolTotal = poolUp + poolDown;\\n        uint256 value;\\n        if (result == BetResult.up && poolUp != 0) {\\n            //(upStake/poolUp)*poolTotal\\n            value = sharePool(poolTotal, upStake, poolUp);\\n            fees = computeFee(value, fee);\\n            gain = value - fees;\\n        } else if (result == BetResult.down && poolDown != 0) {\\n            //(downStake/poolDown)*poolTotal\\n            value = sharePool(poolTotal, downStake, poolDown);\\n            fees = computeFee(value, fee);\\n            gain = value - fees;\\n        } else if (result == BetResult.tie) {\\n            gain = upStake + downStake;\\n        } else {\\n            //If the winning pool is empty, all stake goes to the fees.\\n            gain = 0;\\n            fees = upStake + downStake;\\n        }\\n    }\\n\\n    function betResult(uint256 referencePrice, uint256 settlementPrice)\\n        public\\n        pure\\n        returns (uint8)\\n    {\\n        if (settlementPrice < referencePrice) {\\n            return 0;\\n        } else if (settlementPrice > referencePrice) {\\n            return 1;\\n        }\\n        return 2;\\n    }\\n\\n    function sharePool(\\n        uint256 value,\\n        uint256 shares,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        return (shares * value) / totalShares;\\n    }\\n\\n    function calculateTokenReward(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown\\n    ) public view returns (uint256) {\\n        return\\n            sharePool(\\n                REWARD_PER_WINDOW,\\n                upStake + downStake,\\n                poolUp + poolDown\\n            );\\n    }\\n\\n    function getWindowNumber(\\n        uint256 currentTimestamp,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 windowNumber) {\\n        //n = floor((currentTimestamp - deployTimestamp)/windowDuration  + 1)\\n        windowNumber =\\n            ((currentTimestamp - _deployTimestamp) / _windowDuration)\\n            + 1; //integer division => floor\\n    }\\n\\n    function getWindowStartingTimestamp(\\n        uint256 windowNumber,\\n        uint256 _windowDuration,\\n        uint256 _currentTimestamp\\n    ) public pure returns (uint256 startingTimestamp) {\\n        //deployTimestamp + (n-1 - (offset + 1))*windowDuration\\n        startingTimestamp =\\n            _currentTimestamp +\\n            (windowNumber - 1) *\\n            _windowDuration;\\n    }\\n\\n    function computeFee(uint256 value, uint256 _fee)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        betFee = (value * _fee) / 100;\\n    }\\n\\n    function updatePrice() public {\\n        uint256 window = getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            deployTimestamp\\n        );\\n        if (windowPrice[window] == 0) {\\n            windowPrice[window] = priceOracle();\\n            emit PriceUpdated(window, windowPrice[window]);\\n        }\\n    }\\n\\n    function priceOracle() internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    //Getters\\n    function getPoolValues(uint256 windowNumber)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Pool memory pool = pools[windowNumber];\\n        return (pool.downValue, pool.upValue);\\n    }\\n\\n    function getUserStake(uint256 windowNumber, address _user)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Pool memory stake = user[_user].stake[windowNumber];\\n        return (stake.downValue, stake.upValue);\\n    }\\n\\n    function getWindowBetPrices(uint256 window)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (windowPrice[window + 1], windowPrice[window + 2]);\\n    }\\n\\n    function getUserBetList(address _user, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return user[_user].bets[index];\\n    }\\n\\n    function betListLen(address _user) public view returns (uint256) {\\n        return user[_user].bets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x1e7386ff6ab8da8d927b2c64e23e4ce1c0b9c2a280c44cef4be80427b94794d3\",\"license\":\"Apache-2.0\"},\"contracts/BinaryStaking.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\n\\ncontract BinaryStaking is ERC20 {\\n    string public constant NAME = \\\"Staked KITTY\\\";\\n    string public constant SYMBOL = \\\"sKITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    IERC20 public binToken;\\n\\n    uint256 internal constant PRECISION_CONSTANT = 1e27;\\n    address payable owner;\\n\\n    mapping(address => uint256) public valueWhenLastReleased;\\n    uint256 public accumulatedRewards; //(per staked token)\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event Release(address indexed user, uint256 amount);\\n    event Reward(uint256 amount);\\n\\n    constructor(address token) ERC20(NAME, SYMBOL){\\n        owner = payable(msg.sender);\\n        binToken = BinToken(token);\\n    }\\n\\n    function receiveFunds() public payable {\\n        uint256 value = msg.value;\\n        if (totalSupply() != 0) {\\n            accumulatedRewards =\\n                accumulatedRewards +\\n                (value * PRECISION_CONSTANT) /\\n                totalSupply();\\n        } else {\\n            owner.transfer(value);\\n        }\\n        emit Reward(value);\\n    }\\n\\n    function stake(uint256 amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        release(msg.sender);\\n        require(binToken.transferFrom(msg.sender, address(this), amount));\\n        _mint(msg.sender, amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function unstake(uint256 amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        require(\\n            amount <= balanceOf(msg.sender),\\n            \\\"Cannot unstake more than balance\\\"\\n        );\\n\\n        release(msg.sender);\\n        _burn(msg.sender, amount);\\n\\n        binToken.transfer(msg.sender, amount);\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    function release(address user) public {\\n        if (accumulatedRewards == 0) {\\n            return;\\n        }\\n        uint256 amount = ownedDividends(user);\\n        valueWhenLastReleased[user] = accumulatedRewards;\\n\\n        if (amount > 0) {\\n            payable(user).transfer(amount);\\n            emit Release(user, amount);\\n        }\\n    }\\n\\n    function ownedDividends(address user) public view returns (uint256) {\\n        return\\n            (balanceOf(user) *\\n                (accumulatedRewards - valueWhenLastReleased[user])) /\\n            PRECISION_CONSTANT;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\\n        internal virtual override \\n    {\\n        super._beforeTokenTransfer(from, to, amount);\\n        release(from);\\n        release(to);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4b085a8ae66d468b306b43dc0d8cae3980cccd3aeac5156580ccabd1ee97d5\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b5060405162001904380380620019048339810160408190526200003591620000d2565b60648511156200004457600080fd5b600080546001600160a01b0386166001600160a01b031990911617905542610120526101408690526101008590526001600160601b0319606084811b821660c081905260a05283901b16608052620000a581670de0b6b3a764000062000138565b60e0525062000166945050505050565b80516001600160a01b0381168114620000cd57600080fd5b919050565b60008060008060008060c08789031215620000ec57600080fd5b86519550602087015194506200010560408801620000b5565b93506200011560608801620000b5565b92506200012560808801620000b5565b915060a087015190509295509295509295565b60008160001904831182151516156200016157634e487b7160e01b600052601160045260246000fd5b500290565b60805160601c60a05160601c60c05160601c60e0516101005161012051610140516116f76200020d600039600081816102950152818161060d01528181610a1f0152610c100152600081816102c90152818161062e01528181610a400152610c310152600081816104d60152610df90152600081816103120152610ea90152600050506000610912015260008181610f630152818161104301526110f301526116f76000f3fe60806040526004361061016a5760003560e01c806389b808a7116100cb578063c33909011161007f578063ddca3f4311610059578063ddca3f43146104c4578063e0d65d87146104f8578063f83b35fb1461052557600080fd5b8063c339090114610464578063ca055e5314610484578063daaac9d2146104a457600080fd5b8063ac4afa38116100b0578063ac4afa38146103e3578063b134894e14610417578063b47a35661461044457600080fd5b806389b808a7146103345780639626a2301461037a57600080fd5b8063508ba0bd11610122578063607ad0d711610107578063607ad0d7146102b7578063673a7e28146102eb57806371a422071461030057600080fd5b8063508ba0bd146102635780635c11ff7a1461028357600080fd5b80632ff284c2116101535780632ff284c21461020057806340b8405a1461022e578063430468441461025057600080fd5b80630eff4d881461016f5780631bb5abf9146101ce575b600080fd5b34801561017b57600080fd5b506101b461018a3660046112a7565b60009081526001602081815260409283902083518085019094528054808552920154920182905291565b604080519283526020830191909152015b60405180910390f35b3480156101da57600080fd5b506101ee6101e93660046112c0565b610545565b60405160ff90911681526020016101c5565b34801561020c57600080fd5b5061022061021b3660046112c0565b610571565b6040519081526020016101c5565b34801561023a57600080fd5b5061024e61024936600461130b565b610590565b005b61024e61025e366004611337565b610998565b34801561026f57600080fd5b5061022061027e366004611352565b610bde565b34801561028f57600080fd5b506102207f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c357600080fd5b506102207f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f757600080fd5b5061024e610c08565b34801561030c57600080fd5b506102207f000000000000000000000000000000000000000000000000000000000000000081565b34801561034057600080fd5b5061022061034f36600461130b565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090206001015490565b34801561038657600080fd5b506101b461039536600461137e565b73ffffffffffffffffffffffffffffffffffffffff16600090815260036020908152604080832093835292815290829020825180840190935280548084526001909101549290910182905291565b3480156103ef57600080fd5b506101b46103fe3660046112a7565b6001602081905260009182526040909120805491015482565b34801561042357600080fd5b506104376104323660046113aa565b610cc3565b6040516101c5919061140b565b34801561045057600080fd5b5061022061045f36600461144c565b610d26565b34801561047057600080fd5b5061022061047f366004611352565b610d73565b34801561049057600080fd5b506101b461049f366004611476565b610d95565b3480156104b057600080fd5b506102206104bf3660046113aa565b610ea2565b3480156104d057600080fd5b506102207f000000000000000000000000000000000000000000000000000000000000000081565b34801561050457600080fd5b506102206105133660046112a7565b60026020526000908152604090205481565b34801561053157600080fd5b506101b46105403660046112a7565b610eea565b6000828210156105575750600061056b565b828211156105675750600161056b565b5060025b92915050565b6000606461057f83856114ee565b610589919061152b565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040902060018101546105c2575050565b6001810154600090819081905b80156108ae576000856001016001836105e89190611566565b815481106105f8576105f861157d565b906000526020600020015490506000610652427f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610bde565b905060008061066084610eea565b91509150600061067285858585610cc3565b90506000816003811115610688576106886113dc565b14806106a5575060018160038111156106a3576106a36113dc565b145b156106b457505050505061089c565b600060038260038111156106ca576106ca6113dc565b14156106e1576106da8484610545565b90506106ff565b60028260038111156106f5576106f56113dc565b14156106ff575060025b6001808c018054909161071191611566565b815481106107215761072161157d565b90600052602060002001548b60010160018961073d9190611566565b8154811061074d5761074d61157d565b60009182526020909120015560018b0180548061076c5761076c6115ac565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558782528c8152604080832081518083018352815481526001918201548185019081528b8652828552838620845180860190955280548086529301549484018590525181519195939484936107fb93919089610d95565b909250905061080a828f6115db565b9d50610816818d6115db565b9b506108348460200151856000015185602001518660000151610ea2565b61083e908e6115db565b9c508f73ffffffffffffffffffffffffffffffffffffffff168a7f6f277b50171c654e40c771d9c2bbf19e070eeb21cce6f8e9a80334564279e3958460405161088991815260200190565b60405180910390a3505050505050505050505b806108a6816115f3565b9150506105cf565b5082156108fa5760405173ffffffffffffffffffffffffffffffffffffffff86169084156108fc029085906000818181858888f193505050501580156108f8573d6000803e3d6000fd5b505b811561090a5761090a8583610f33565b8015610991577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16625c33e1826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561097757600080fd5b505af115801561098b573d6000803e3d6000fd5b50505050505b5050505050565b60003411610a06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207374726963746c7920706f7369746976652076616c756573000000604482015260640160405180910390fd5b610a0e610c08565b610a1733610590565b6000610a64427f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610bde565b3360009081526003602052604090206001810154919250901580610ab45750600180820180549091610a9591611566565b81548110610aa557610aa561157d565b90600052602060002001548214155b15610ad357600180820180549182018155600090815260209020018290555b60018360ff166001811115610aea57610aea6113dc565b6001811115610afb57610afb6113dc565b1415610b535760008281526020829052604081206001018054349290610b229084906115db565b909155505060008281526001602081905260408220018054349290610b489084906115db565b90915550610b9a9050565b60008281526020829052604081208054349290610b719084906115db565b909155505060008281526001602052604081208054349290610b949084906115db565b90915550505b6040805134815260ff85166020820152839133917f85ff162f60a0eab11e1e0d3d9cfa18a46d7038a29751af4130dbaeeadbd37ed4910160405180910390a3505050565b600082610beb8386611566565b610bf5919061152b565b610c009060016115db565b949350505050565b6000610c55427f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610bde565b600081815260026020526040902054909150610cc057610c736111e2565b600082815260026020526040908190208290555182917f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd69683891610cb791815260200190565b60405180910390a25b50565b6000610cd08560026115db565b841015610cdf57506000610c00565b610cea8560036115db565b84108015610cf6575081155b15610d0357506001610c00565b821580610d0e575081155b15610d1b57506002610c00565b506003949350505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120600101805483908110610d6057610d6061157d565b9060005260206000200154905092915050565b600082610d81600186611566565b610d8b91906114ee565b610c0090836115db565b60008060008360ff166002811115610daf57610daf6113dc565b90506000610dbd86886115db565b905060006001836002811115610dd557610dd56113dc565b148015610de157508715155b15610e3057610df1828b8a611290565b9050610e1d817f0000000000000000000000000000000000000000000000000000000000000000610571565b9350610e298482611566565b9450610e95565b6000836002811115610e4457610e446113dc565b148015610e5057508615155b15610e6057610df1828a89611290565b6002836002811115610e7457610e746113dc565b1415610e8457610e29898b6115db565b60009450610e92898b6115db565b93505b5050509550959350505050565b6000610ee17f0000000000000000000000000000000000000000000000000000000000000000610ed286886115db565b610edc85876115db565b611290565b95945050505050565b600080600281610efb8560016115db565b81526020019081526020016000205460026000856002610f1b91906115db565b81526020019081526020016000205491509150915091565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015281907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610fba57600080fd5b505afa158015610fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff29190611628565b106110c5576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b602060405180830381600087803b15801561108857600080fd5b505af115801561109c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c09190611641565b505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c9190611628565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440161106e565b60008054604080517ffeaf968c0000000000000000000000000000000000000000000000000000000081529051839273ffffffffffffffffffffffffffffffffffffffff169163feaf968c9160048083019260a0929190829003018186803b15801561124d57600080fd5b505afa158015611261573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611285919061167d565b509195945050505050565b60008161129d85856114ee565b610c00919061152b565b6000602082840312156112b957600080fd5b5035919050565b600080604083850312156112d357600080fd5b50508035926020909101359150565b803573ffffffffffffffffffffffffffffffffffffffff8116811461130657600080fd5b919050565b60006020828403121561131d57600080fd5b610589826112e2565b803560ff8116811461130657600080fd5b60006020828403121561134957600080fd5b61058982611326565b60008060006060848603121561136757600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561139157600080fd5b823591506113a1602084016112e2565b90509250929050565b600080600080608085870312156113c057600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160048310611446577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000806040838503121561145f57600080fd5b611468836112e2565b946020939093013593505050565b600080600080600060a0868803121561148e57600080fd5b853594506020860135935060408601359250606086013591506114b360808701611326565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611526576115266114bf565b500290565b600082611561577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611578576115786114bf565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082198211156115ee576115ee6114bf565b500190565b600081611602576116026114bf565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561163a57600080fd5b5051919050565b60006020828403121561165357600080fd5b8151801515811461058957600080fd5b805169ffffffffffffffffffff8116811461130657600080fd5b600080600080600060a0868803121561169557600080fd5b61169e86611663565b94506020860151935060408601519250606086015191506114b36080870161166356fea2646970667358221220d72865c6fd308013743f4371897442828514ed99becab5ccbf92aac965f499a964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061016a5760003560e01c806389b808a7116100cb578063c33909011161007f578063ddca3f4311610059578063ddca3f43146104c4578063e0d65d87146104f8578063f83b35fb1461052557600080fd5b8063c339090114610464578063ca055e5314610484578063daaac9d2146104a457600080fd5b8063ac4afa38116100b0578063ac4afa38146103e3578063b134894e14610417578063b47a35661461044457600080fd5b806389b808a7146103345780639626a2301461037a57600080fd5b8063508ba0bd11610122578063607ad0d711610107578063607ad0d7146102b7578063673a7e28146102eb57806371a422071461030057600080fd5b8063508ba0bd146102635780635c11ff7a1461028357600080fd5b80632ff284c2116101535780632ff284c21461020057806340b8405a1461022e578063430468441461025057600080fd5b80630eff4d881461016f5780631bb5abf9146101ce575b600080fd5b34801561017b57600080fd5b506101b461018a3660046112a7565b60009081526001602081815260409283902083518085019094528054808552920154920182905291565b604080519283526020830191909152015b60405180910390f35b3480156101da57600080fd5b506101ee6101e93660046112c0565b610545565b60405160ff90911681526020016101c5565b34801561020c57600080fd5b5061022061021b3660046112c0565b610571565b6040519081526020016101c5565b34801561023a57600080fd5b5061024e61024936600461130b565b610590565b005b61024e61025e366004611337565b610998565b34801561026f57600080fd5b5061022061027e366004611352565b610bde565b34801561028f57600080fd5b506102207f000000000000000000000000000000000000000000000000000000000000000081565b3480156102c357600080fd5b506102207f000000000000000000000000000000000000000000000000000000000000000081565b3480156102f757600080fd5b5061024e610c08565b34801561030c57600080fd5b506102207f000000000000000000000000000000000000000000000000000000000000000081565b34801561034057600080fd5b5061022061034f36600461130b565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003602052604090206001015490565b34801561038657600080fd5b506101b461039536600461137e565b73ffffffffffffffffffffffffffffffffffffffff16600090815260036020908152604080832093835292815290829020825180840190935280548084526001909101549290910182905291565b3480156103ef57600080fd5b506101b46103fe3660046112a7565b6001602081905260009182526040909120805491015482565b34801561042357600080fd5b506104376104323660046113aa565b610cc3565b6040516101c5919061140b565b34801561045057600080fd5b5061022061045f36600461144c565b610d26565b34801561047057600080fd5b5061022061047f366004611352565b610d73565b34801561049057600080fd5b506101b461049f366004611476565b610d95565b3480156104b057600080fd5b506102206104bf3660046113aa565b610ea2565b3480156104d057600080fd5b506102207f000000000000000000000000000000000000000000000000000000000000000081565b34801561050457600080fd5b506102206105133660046112a7565b60026020526000908152604090205481565b34801561053157600080fd5b506101b46105403660046112a7565b610eea565b6000828210156105575750600061056b565b828211156105675750600161056b565b5060025b92915050565b6000606461057f83856114ee565b610589919061152b565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260036020526040902060018101546105c2575050565b6001810154600090819081905b80156108ae576000856001016001836105e89190611566565b815481106105f8576105f861157d565b906000526020600020015490506000610652427f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610bde565b905060008061066084610eea565b91509150600061067285858585610cc3565b90506000816003811115610688576106886113dc565b14806106a5575060018160038111156106a3576106a36113dc565b145b156106b457505050505061089c565b600060038260038111156106ca576106ca6113dc565b14156106e1576106da8484610545565b90506106ff565b60028260038111156106f5576106f56113dc565b14156106ff575060025b6001808c018054909161071191611566565b815481106107215761072161157d565b90600052602060002001548b60010160018961073d9190611566565b8154811061074d5761074d61157d565b60009182526020909120015560018b0180548061076c5761076c6115ac565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558782528c8152604080832081518083018352815481526001918201548185019081528b8652828552838620845180860190955280548086529301549484018590525181519195939484936107fb93919089610d95565b909250905061080a828f6115db565b9d50610816818d6115db565b9b506108348460200151856000015185602001518660000151610ea2565b61083e908e6115db565b9c508f73ffffffffffffffffffffffffffffffffffffffff168a7f6f277b50171c654e40c771d9c2bbf19e070eeb21cce6f8e9a80334564279e3958460405161088991815260200190565b60405180910390a3505050505050505050505b806108a6816115f3565b9150506105cf565b5082156108fa5760405173ffffffffffffffffffffffffffffffffffffffff86169084156108fc029085906000818181858888f193505050501580156108f8573d6000803e3d6000fd5b505b811561090a5761090a8583610f33565b8015610991577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16625c33e1826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561097757600080fd5b505af115801561098b573d6000803e3d6000fd5b50505050505b5050505050565b60003411610a06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207374726963746c7920706f7369746976652076616c756573000000604482015260640160405180910390fd5b610a0e610c08565b610a1733610590565b6000610a64427f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610bde565b3360009081526003602052604090206001810154919250901580610ab45750600180820180549091610a9591611566565b81548110610aa557610aa561157d565b90600052602060002001548214155b15610ad357600180820180549182018155600090815260209020018290555b60018360ff166001811115610aea57610aea6113dc565b6001811115610afb57610afb6113dc565b1415610b535760008281526020829052604081206001018054349290610b229084906115db565b909155505060008281526001602081905260408220018054349290610b489084906115db565b90915550610b9a9050565b60008281526020829052604081208054349290610b719084906115db565b909155505060008281526001602052604081208054349290610b949084906115db565b90915550505b6040805134815260ff85166020820152839133917f85ff162f60a0eab11e1e0d3d9cfa18a46d7038a29751af4130dbaeeadbd37ed4910160405180910390a3505050565b600082610beb8386611566565b610bf5919061152b565b610c009060016115db565b949350505050565b6000610c55427f00000000000000000000000000000000000000000000000000000000000000007f0000000000000000000000000000000000000000000000000000000000000000610bde565b600081815260026020526040902054909150610cc057610c736111e2565b600082815260026020526040908190208290555182917f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd69683891610cb791815260200190565b60405180910390a25b50565b6000610cd08560026115db565b841015610cdf57506000610c00565b610cea8560036115db565b84108015610cf6575081155b15610d0357506001610c00565b821580610d0e575081155b15610d1b57506002610c00565b506003949350505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600360205260408120600101805483908110610d6057610d6061157d565b9060005260206000200154905092915050565b600082610d81600186611566565b610d8b91906114ee565b610c0090836115db565b60008060008360ff166002811115610daf57610daf6113dc565b90506000610dbd86886115db565b905060006001836002811115610dd557610dd56113dc565b148015610de157508715155b15610e3057610df1828b8a611290565b9050610e1d817f0000000000000000000000000000000000000000000000000000000000000000610571565b9350610e298482611566565b9450610e95565b6000836002811115610e4457610e446113dc565b148015610e5057508615155b15610e6057610df1828a89611290565b6002836002811115610e7457610e746113dc565b1415610e8457610e29898b6115db565b60009450610e92898b6115db565b93505b5050509550959350505050565b6000610ee17f0000000000000000000000000000000000000000000000000000000000000000610ed286886115db565b610edc85876115db565b611290565b95945050505050565b600080600281610efb8560016115db565b81526020019081526020016000205460026000856002610f1b91906115db565b81526020019081526020016000205491509150915091565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015281907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b158015610fba57600080fd5b505afa158015610fce573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ff29190611628565b106110c5576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b602060405180830381600087803b15801561108857600080fd5b505af115801561109c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c09190611641565b505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561115457600080fd5b505afa158015611168573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061118c9190611628565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff9092166004830152602482015260440161106e565b60008054604080517ffeaf968c0000000000000000000000000000000000000000000000000000000081529051839273ffffffffffffffffffffffffffffffffffffffff169163feaf968c9160048083019260a0929190829003018186803b15801561124d57600080fd5b505afa158015611261573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611285919061167d565b509195945050505050565b60008161129d85856114ee565b610c00919061152b565b6000602082840312156112b957600080fd5b5035919050565b600080604083850312156112d357600080fd5b50508035926020909101359150565b803573ffffffffffffffffffffffffffffffffffffffff8116811461130657600080fd5b919050565b60006020828403121561131d57600080fd5b610589826112e2565b803560ff8116811461130657600080fd5b60006020828403121561134957600080fd5b61058982611326565b60008060006060848603121561136757600080fd5b505081359360208301359350604090920135919050565b6000806040838503121561139157600080fd5b823591506113a1602084016112e2565b90509250929050565b600080600080608085870312156113c057600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b6020810160048310611446577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b91905290565b6000806040838503121561145f57600080fd5b611468836112e2565b946020939093013593505050565b600080600080600060a0868803121561148e57600080fd5b853594506020860135935060408601359250606086013591506114b360808701611326565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611526576115266114bf565b500290565b600082611561577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b600082821015611578576115786114bf565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082198211156115ee576115ee6114bf565b500190565b600081611602576116026114bf565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561163a57600080fd5b5051919050565b60006020828403121561165357600080fd5b8151801515811461058957600080fd5b805169ffffffffffffffffffff8116811461130657600080fd5b600080600080600060a0868803121561169557600080fd5b61169e86611663565b94506020860151935060408601519250606086015191506114b36080870161166356fea2646970667358221220d72865c6fd308013743f4371897442828514ed99becab5ccbf92aac965f499a964736f6c63430008080033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1550,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 1565,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Pool)1547_storage)"
      },
      {
        "astId": 1575,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "windowPrice",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1589,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "user",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(User)1584_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)1584_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BinaryBet.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1584_storage"
      },
      "t_mapping(t_uint256,t_struct(Pool)1547_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BinaryBet.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)1547_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pool)1547_storage": {
        "encoding": "inplace",
        "label": "struct BinaryBet.Pool",
        "members": [
          {
            "astId": 1544,
            "contract": "contracts/BinaryBet.sol:BinaryBet",
            "label": "downValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1546,
            "contract": "contracts/BinaryBet.sol:BinaryBet",
            "label": "upValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)1584_storage": {
        "encoding": "inplace",
        "label": "struct BinaryBet.User",
        "members": [
          {
            "astId": 1580,
            "contract": "contracts/BinaryBet.sol:BinaryBet",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Pool)1547_storage)"
          },
          {
            "astId": 1583,
            "contract": "contracts/BinaryBet.sol:BinaryBet",
            "label": "bets",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}