{
  "address": "0x17101909E89EdE2D0588365202111113e7BCf581",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_windowDuration",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "binarybetContract",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "NewBet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "betListLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        }
      ],
      "name": "getPoolValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserBetList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        }
      ],
      "name": "getWindowBetPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "downValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolDown",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "res",
          "type": "uint8"
        }
      ],
      "name": "settleBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "windowDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x59c77dccb8d13fa45f09fe8b16349ad757229d38b9aacd9afd43c9b9020c21b7",
  "receipt": {
    "to": null,
    "from": "0xb9249FC2c91232926243a7b70397f5775286a1a6",
    "contractAddress": "0x17101909E89EdE2D0588365202111113e7BCf581",
    "transactionIndex": 0,
    "gasUsed": "1437655",
    "logsBloom": "0x
    "blockHash": "0x1334d0712c85ee7a943882abda0b2d96a8c736387cbae8c3e102437aa2304a62",
    "transactionHash": "0x59c77dccb8d13fa45f09fe8b16349ad757229d38b9aacd9afd43c9b9020c21b7",
    "logs": [],
    "blockNumber": 7341090,
    "cumulativeGasUsed": "1437655",
    "status": 1,
    "byzantium": true
  },
  "args": [
    14400,
    "0xA4EE28E4C1115006CB42028E06228Ea5337508Df",
    "0xFc2325c1A5a8822730DC8fE81403d52159996F7b"
  ],
  "solcInputHash": "be8cdf0e8d14af2c577c403a0e9e26d2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_windowDuration\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"binarybetContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"betListLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"}],\"name\":\"getPoolValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserBetList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"}],\"name\":\"getWindowBetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"downValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"res\",\"type\":\"uint8\"}],\"name\":\"settleBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"windowDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DailyPool.sol\":\"DailyPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd1d8caaeb45f78e0b0715664d56c220c283c89bf8b8c02954af86404d6b367f8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BetLibrary.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary BetLibrary {\\n    //Structs and enums\\n    enum BetSide {\\n        down,\\n        up\\n    }\\n    enum BetResult {\\n        down,\\n        up,\\n        tie\\n    }\\n    enum WindowStatus {\\n        notFinalized,\\n        waitingPrice,\\n        failedUpdate,\\n        finalized\\n    }\\n\\n    struct Pool {\\n        uint256 downValue;\\n        uint256 upValue;\\n    }\\n\\n    struct User {\\n        mapping(uint256 => Pool) stake;\\n        uint256[] bets;\\n    }\\n\\n\\n\\n    function windowStatus(\\n        uint256 window,\\n        uint256 currentWindow,\\n        uint256 initialPrice,\\n        uint256 finalPrice\\n    ) public pure returns (WindowStatus status) {\\n        if (currentWindow < window + 2) {\\n            //window not yet settled\\n            return WindowStatus.notFinalized;\\n        } else if (currentWindow < window + 3 && finalPrice == 0) {\\n            //price not updated but update still possible.\\n            return WindowStatus.waitingPrice;\\n        } else if (initialPrice == 0 || finalPrice == 0) {\\n            return WindowStatus.failedUpdate;\\n        } else {\\n            return WindowStatus.finalized;\\n        }\\n    }\\n\\n    function betResultBinary(uint256 referencePrice, uint256 settlementPrice)\\n        public\\n        pure\\n        returns (uint8)\\n    {\\n        if (settlementPrice < referencePrice) {\\n            return 0;\\n        } else if (settlementPrice > referencePrice) {\\n            return 1;\\n        }\\n        return 2;\\n    }\\n\\n    function sharePool(\\n        uint256 value,\\n        uint256 shares,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        return (shares * value) / totalShares;\\n    }\\n\\n\\n    function getWindowNumber(\\n        uint256 currentTimestamp,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 windowNumber) {\\n        //n = floor((currentTimestamp - deployTimestamp)/windowDuration  + 1)\\n        windowNumber =\\n            ((currentTimestamp - _deployTimestamp) / _windowDuration)\\n            + 1; //integer division => floor\\n    }\\n\\n    function getWindowStartingTimestamp(\\n        uint256 windowNumber,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 startingTimestamp) {\\n        //deployTimestamp + (n-1 - (offset + 1))*windowDuration\\n        startingTimestamp =\\n            _deployTimestamp +\\n            (windowNumber - 1) *\\n            _deployTimestamp;\\n    }\\n\\n    function computeFee(uint256 value, uint256 _fee)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        betFee = (value * _fee) / 100;\\n    }\\n\\n    function computeFeeCapped(uint256 value, uint256 _fee, uint cap)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        if ( (value * _fee) / 100 < cap) {\\n            betFee = (value * _fee) / 100;\\n        }\\n        else {\\n            betFee = cap;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x100ea4efa7e8468280d5acc339ef74e13538a07fbf062ff0a72642a9afbc3d0f\",\"license\":\"Apache-2.0\"},\"contracts/BinToken.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\ncontract BinToken is ERC20 {\\n    //using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"KITTY\\\";\\n    string public constant SYMBOL = \\\"KITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY =\\n        100000000 * (10**uint256(DECIMALS));\\n    uint256 public constant IDO_SUPPLY =\\n        12500000 * (10**uint256(DECIMALS));\\n\\n    mapping(address => mapping(address => uint256)) allowed;\\n\\n    constructor(address ido) ERC20(NAME, SYMBOL) {\\n        _mint(ido, IDO_SUPPLY);\\n        _mint(msg.sender, INITIAL_SUPPLY - IDO_SUPPLY);\\n    }\\n}\\n\",\"keccak256\":\"0xc41bc4caa22127ea48e686a90bf656737be43cda0a8ceedb8e8e2101792243d2\",\"license\":\"Apache-2.0\"},\"contracts/BinaryBet.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\nimport \\\"./BinaryStaking.sol\\\";\\n\\ncontract BinaryBet {\\n    //Structs and enums\\n    enum BetSide {\\n        down,\\n        up\\n    }\\n    enum BetResult {\\n        down,\\n        up,\\n        tie\\n    }\\n    enum WindowStatus {\\n        notFinalized,\\n        waitingPrice,\\n        failedUpdate,\\n        finalized\\n    }\\n\\n    struct Pool {\\n        uint256 downValue;\\n        uint256 upValue;\\n    }\\n\\n    //Other contracts interactions\\n    AggregatorV3Interface internal priceFeed;\\n    BinToken immutable token;\\n    BinaryStaking immutable staking;\\n    address payable immutable stakingAddress;\\n\\n    //Betting variables\\n    uint256 public immutable REWARD_PER_WINDOW;\\n    mapping(uint256 => Pool) public pools; //windowNumber => Pool\\n    uint256 public immutable fee;\\n    uint256 public immutable deployTimestamp;\\n\\n\\n    //Window management\\n    uint256 public immutable windowDuration; //in epoch timestamp\\n    mapping(uint256 => uint256) public windowPrice; /*first price collection\\n                                                      at the window.\\n                                                     */\\n    //User variables\\n    struct User {\\n        mapping(uint256 => Pool) stake;\\n        uint256[] bets;\\n    }\\n    mapping(address => User) user;\\n\\n    //EVENTS\\n    event NewBet(\\n        address indexed user,\\n        uint256 indexed windowNumber,\\n        uint256 value,\\n        uint8 side\\n    );\\n    event BetSettled(\\n        uint256 indexed windowNumber,\\n        address indexed user,\\n        uint256 gain\\n    );\\n    event PriceUpdated(uint256 indexed windowNumber, uint256 price);\\n\\n    constructor(\\n        uint256 _windowDuration, \\n        uint256 _fee,\\n        address aggregator,\\n        address stakingContract,\\n        address tokenContract,\\n        uint256 reward\\n    ) {\\n        require(_fee <= 100);\\n        priceFeed = AggregatorV3Interface(aggregator);\\n        deployTimestamp = block.timestamp;\\n        windowDuration = _windowDuration;\\n\\n        fee = _fee;\\n\\n        stakingAddress = payable(stakingContract);\\n        staking = BinaryStaking(stakingAddress);\\n        token = BinToken(tokenContract);\\n\\n        REWARD_PER_WINDOW = reward * 1e18;\\n    }\\n\\n    function placeBet(uint8 side) external payable {\\n        require(msg.value > 0, \\\"Only strictly positive values\\\");\\n        updatePrice();\\n        updateBalance(msg.sender);\\n\\n        uint256 windowNumber = getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            deployTimestamp\\n        );\\n\\n        User storage sender = user[msg.sender];\\n        if (sender.bets.length == 0 ||\\n            windowNumber != sender.bets[sender.bets.length - 1]) {\\n            /*\\n               Only adds to the list if its the first user bet on the window.\\n               If length is zero, the code only evaluates the first condition,\\n               avoiding the possible underflow length - 1.\\n            */\\n            sender.bets.push(windowNumber);\\n        }\\n\\n        //Update the user stake and pool for the window.\\n        if (BetSide(side) == BetSide.up) {\\n            sender.stake[windowNumber].upValue += msg.value;\\n            pools[windowNumber].upValue += msg.value;\\n        }\\n        else {\\n            sender.stake[windowNumber].downValue += msg.value;\\n            pools[windowNumber].downValue += msg.value;\\n        }\\n\\n        emit NewBet(msg.sender, windowNumber, msg.value, side);\\n    }\\n\\n    function updateBalance(address _user) public {\\n        User storage userData = user[_user];\\n        if (userData.bets.length == 0) {\\n            //No bets to settle\\n            return;\\n        }\\n\\n        uint256 totalGain = 0;\\n        uint256 totalRewards = 0;\\n        uint256 accumulatedFees = 0;\\n        for (uint256 i = userData.bets.length; i > 0; i--) {\\n            /*Maximum number of itens in list is 2, when the user bets\\n              on 2 subsequent windows and the first window is not yet settled.\\n            */\\n            uint256 window = userData.bets[i - 1];\\n            uint256 currentWindow = getWindowNumber(\\n                block.timestamp,\\n                windowDuration,\\n                deployTimestamp\\n            );\\n            (\\n                uint256 referencePrice,\\n                uint256 settlementPrice\\n            ) = getWindowBetPrices(window);\\n\\n            WindowStatus status = windowStatus(\\n                window,\\n                currentWindow,\\n                referencePrice,\\n                settlementPrice\\n            );\\n            if (\\n                status == WindowStatus.notFinalized ||\\n                status == WindowStatus.waitingPrice\\n            ) {\\n                continue;\\n            }\\n\\n            uint8 result;\\n            if (status == WindowStatus.finalized) {\\n                result = betResult(referencePrice, settlementPrice);\\n            } else if (status == WindowStatus.failedUpdate) {\\n                result = 2;\\n            }\\n\\n            //Remove window from list of unsettled bets.\\n            userData.bets[i - 1] = userData.bets[\\n                userData.bets.length - 1\\n            ];\\n            userData.bets.pop();\\n\\n            Pool memory stake = userData.stake[window];\\n            Pool memory pool = pools[window];\\n            (uint256 windowGain, uint256 fees) = settleBet(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue,\\n                result\\n            );\\n\\n            totalGain += windowGain;\\n            accumulatedFees += fees;\\n\\n            //KITTY token rewards\\n            totalRewards += calculateTokenReward(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue\\n            );\\n\\n            emit BetSettled(window, _user, windowGain);\\n        }\\n\\n        if (totalGain > 0) {\\n            payable(_user).transfer(totalGain);\\n        }\\n\\n        if (totalRewards > 0) {\\n            transferRewards(_user, totalRewards);\\n        }\\n\\n        if (accumulatedFees > 0) {\\n            staking.receiveFunds{value: accumulatedFees}();\\n        }\\n    }\\n\\n    function windowStatus(\\n        uint256 window,\\n        uint256 currentWindow,\\n        uint256 initialPrice,\\n        uint256 finalPrice\\n    ) public pure returns (WindowStatus status) {\\n        if (currentWindow < window + 2) {\\n            //window not yet settled\\n            return WindowStatus.notFinalized;\\n        } else if (currentWindow < window + 3 && finalPrice == 0) {\\n            //price not updated but update still possible.\\n            return WindowStatus.waitingPrice;\\n        } else if (initialPrice == 0 || finalPrice == 0) {\\n            return WindowStatus.failedUpdate;\\n        } else {\\n            return WindowStatus.finalized;\\n        }\\n    }\\n\\n    function transferRewards(address user, uint256 amount) internal {\\n        if (token.balanceOf(address(this)) >= amount) {\\n            token.transfer(user, amount);\\n        } else {\\n            token.transfer(user, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function settleBet(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown,\\n        uint8 res\\n    ) public view returns (uint256 gain, uint256 fees) {\\n        BetResult result = BetResult(res);\\n        uint256 poolTotal = poolUp + poolDown;\\n        uint256 value;\\n        if (result == BetResult.up && poolUp != 0) {\\n            //(upStake/poolUp)*poolTotal\\n            value = sharePool(poolTotal, upStake, poolUp);\\n            fees = computeFee(value, fee);\\n            gain = value - fees;\\n        } else if (result == BetResult.down && poolDown != 0) {\\n            //(downStake/poolDown)*poolTotal\\n            value = sharePool(poolTotal, downStake, poolDown);\\n            fees = computeFee(value, fee);\\n            gain = value - fees;\\n        } else if (result == BetResult.tie) {\\n            gain = upStake + downStake;\\n        } else {\\n            //If the winning pool is empty, all stake goes to the fees.\\n            gain = 0;\\n            fees = upStake + downStake;\\n        }\\n    }\\n\\n    function betResult(uint256 referencePrice, uint256 settlementPrice)\\n        public\\n        pure\\n        returns (uint8)\\n    {\\n        if (settlementPrice < referencePrice) {\\n            return 0;\\n        } else if (settlementPrice > referencePrice) {\\n            return 1;\\n        }\\n        return 2;\\n    }\\n\\n    function sharePool(\\n        uint256 value,\\n        uint256 shares,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        return (shares * value) / totalShares;\\n    }\\n\\n    function calculateTokenReward(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown\\n    ) public view returns (uint256) {\\n        return\\n            sharePool(\\n                REWARD_PER_WINDOW,\\n                upStake + downStake,\\n                poolUp + poolDown\\n            );\\n    }\\n\\n    function getWindowNumber(\\n        uint256 currentTimestamp,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 windowNumber) {\\n        //n = floor((currentTimestamp - deployTimestamp)/windowDuration  + 1)\\n        windowNumber =\\n            ((currentTimestamp - _deployTimestamp) / _windowDuration)\\n            + 1; //integer division => floor\\n    }\\n\\n    function getWindowStartingTimestamp(\\n        uint256 windowNumber,\\n        uint256 _windowDuration,\\n        uint256 _currentTimestamp\\n    ) public pure returns (uint256 startingTimestamp) {\\n        //deployTimestamp + (n-1 - (offset + 1))*windowDuration\\n        startingTimestamp =\\n            _currentTimestamp +\\n            (windowNumber - 1) *\\n            _windowDuration;\\n    }\\n\\n    function computeFee(uint256 value, uint256 _fee)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        betFee = (value * _fee) / 100;\\n    }\\n\\n    function updatePrice() public {\\n        uint256 window = getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            deployTimestamp\\n        );\\n        if (windowPrice[window] == 0) {\\n            windowPrice[window] = priceOracle();\\n            emit PriceUpdated(window, windowPrice[window]);\\n        }\\n    }\\n\\n    function priceOracle() internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    //Getters\\n    function getPoolValues(uint256 windowNumber)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Pool memory pool = pools[windowNumber];\\n        return (pool.downValue, pool.upValue);\\n    }\\n\\n    function getUserStake(uint256 windowNumber, address _user)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Pool memory stake = user[_user].stake[windowNumber];\\n        return (stake.downValue, stake.upValue);\\n    }\\n\\n    function getWindowBetPrices(uint256 window)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (windowPrice[window + 1], windowPrice[window + 2]);\\n    }\\n\\n    function getUserBetList(address _user, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return user[_user].bets[index];\\n    }\\n\\n    function betListLen(address _user) public view returns (uint256) {\\n        return user[_user].bets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x1e7386ff6ab8da8d927b2c64e23e4ce1c0b9c2a280c44cef4be80427b94794d3\",\"license\":\"Apache-2.0\"},\"contracts/BinaryStaking.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\n\\ncontract BinaryStaking is ERC20 {\\n    string public constant NAME = \\\"Staked KITTY\\\";\\n    string public constant SYMBOL = \\\"sKITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    IERC20 public binToken;\\n\\n    uint256 internal constant PRECISION_CONSTANT = 1e27;\\n    address payable owner;\\n\\n    mapping(address => uint256) public valueWhenLastReleased;\\n    uint256 public accumulatedRewards; //(per staked token)\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event Release(address indexed user, uint256 amount);\\n    event Reward(uint256 amount);\\n\\n    constructor(address token) ERC20(NAME, SYMBOL){\\n        owner = payable(msg.sender);\\n        binToken = BinToken(token);\\n    }\\n\\n    function receiveFunds() public payable {\\n        uint256 value = msg.value;\\n        if (totalSupply() != 0) {\\n            accumulatedRewards =\\n                accumulatedRewards +\\n                (value * PRECISION_CONSTANT) /\\n                totalSupply();\\n        } else {\\n            owner.transfer(value);\\n        }\\n        emit Reward(value);\\n    }\\n\\n    function stake(uint256 amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        release(msg.sender);\\n        require(binToken.transferFrom(msg.sender, address(this), amount));\\n        _mint(msg.sender, amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function unstake(uint256 amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        require(\\n            amount <= balanceOf(msg.sender),\\n            \\\"Cannot unstake more than balance\\\"\\n        );\\n\\n        release(msg.sender);\\n        _burn(msg.sender, amount);\\n\\n        binToken.transfer(msg.sender, amount);\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    function release(address user) public {\\n        if (accumulatedRewards == 0) {\\n            return;\\n        }\\n        uint256 amount = ownedDividends(user);\\n        valueWhenLastReleased[user] = accumulatedRewards;\\n\\n        if (amount > 0) {\\n            payable(user).transfer(amount);\\n            emit Release(user, amount);\\n        }\\n    }\\n\\n    function ownedDividends(address user) public view returns (uint256) {\\n        return\\n            (balanceOf(user) *\\n                (accumulatedRewards - valueWhenLastReleased[user])) /\\n            PRECISION_CONSTANT;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\\n        internal virtual override \\n    {\\n        super._beforeTokenTransfer(from, to, amount);\\n        release(from);\\n        release(to);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4b085a8ae66d468b306b43dc0d8cae3980cccd3aeac5156580ccabd1ee97d5\",\"license\":\"Apache-2.0\"},\"contracts/DailyPool.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BinaryBet.sol\\\";\\nimport \\\"./BetLibrary.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\n\\ncontract DailyPool {\\n    BinaryBet immutable binarybet;\\n    BinToken immutable token;\\n\\n    mapping(address => BetLibrary.User) user;\\n    mapping(uint256 => BetLibrary.Pool) public pools; //windowNumber => Pool\\n\\n    uint public windowDuration;\\n\\n    //EVENTS\\n    event NewBet(\\n        address indexed user,\\n        uint256 indexed windowNumber,\\n        uint256 value,\\n        uint8 side\\n    );\\n    event BetSettled(\\n        uint256 indexed windowNumber,\\n        address indexed user,\\n        uint256 gain\\n    );\\n\\n    constructor(\\n        uint _windowDuration,\\n        address tokenContract,\\n        address binarybetContract\\n    ) {\\n        binarybet = BinaryBet(binarybetContract);\\n        token = BinToken(tokenContract);\\n        windowDuration = _windowDuration;\\n    }\\n\\n    function placeBet(uint8 side, uint value) external payable {\\n        require(value > 0, \\\"Only strictly positive values\\\");\\n        binarybet.updatePrice();\\n        updateBalance(msg.sender);\\n\\n        token.transferFrom(msg.sender, address(this), value);\\n        uint256 windowNumber = BetLibrary.getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            binarybet.deployTimestamp()\\n        );\\n\\n\\n        BetLibrary.User storage sender = user[msg.sender];\\n        if (sender.bets.length == 0 ||\\n            windowNumber != sender.bets[sender.bets.length - 1]) {\\n            /*\\n               Only adds to the list if its the first user bet on the window.\\n               If length is zero, the code only evaluates the first condition,\\n               avoiding the possible underflow length - 1.\\n            */\\n            sender.bets.push(windowNumber);\\n        }\\n\\n        //Update the user stake and pool for the window.\\n        if (BetLibrary.BetSide(side) == BetLibrary.BetSide.up) {\\n            sender.stake[windowNumber].upValue += value;\\n            pools[windowNumber].upValue += value;\\n        }\\n        else {\\n            sender.stake[windowNumber].downValue += value;\\n            pools[windowNumber].downValue += value;\\n        }\\n\\n        emit NewBet(msg.sender, windowNumber, value, side);\\n    }\\n\\n    function updateBalance(address _user) public{\\n        BetLibrary.User storage userData = user[_user];\\n        if (userData.bets.length == 0) {\\n            //No bets to settle\\n            return;\\n        }\\n\\n        uint256 totalGain = 0;\\n        for (uint256 i = userData.bets.length; i > 0; i--) {\\n            /*Maximum number of itens in list is 2, when the user bets\\n              on 2 subsequent windows and the first window is not yet settled.\\n            */\\n            uint256 window = userData.bets[i - 1];\\n            uint256 currentWindow = BetLibrary.getWindowNumber(\\n                block.timestamp,\\n                windowDuration,\\n                binarybet.deployTimestamp()\\n            );\\n            (\\n                uint256 referencePrice,\\n                uint256 settlementPrice\\n            ) = getWindowBetPrices(window);\\n\\n            BetLibrary.WindowStatus status = BetLibrary.windowStatus(\\n                window,\\n                currentWindow,\\n                referencePrice,\\n                settlementPrice\\n            );\\n            if (\\n                status == BetLibrary.WindowStatus.notFinalized ||\\n                status == BetLibrary.WindowStatus.waitingPrice\\n            ) {\\n                continue;\\n            }\\n\\n            uint8 result;\\n            if (status == BetLibrary.WindowStatus.finalized) {\\n                result = BetLibrary.betResultBinary(referencePrice, settlementPrice);\\n            } else if (status == BetLibrary.WindowStatus.failedUpdate) {\\n                result = 2;\\n            }\\n\\n            //Remove window from list of unsettled bets.\\n            userData.bets[i - 1] = userData.bets[\\n                userData.bets.length - 1\\n            ];\\n            userData.bets.pop();\\n\\n            BetLibrary.Pool memory stake = userData.stake[window];\\n            BetLibrary.Pool memory pool = pools[window];\\n            uint256 windowGain = settleBet(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue,\\n                result\\n            );\\n\\n            totalGain += windowGain;\\n\\n            emit BetSettled(window, _user, windowGain);\\n        }\\n\\n\\n        if (totalGain > 0) {\\n            token.transfer(_user, totalGain);\\n        }\\n    }\\n\\n    function settleBet(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown,\\n        uint8 res\\n    ) public view returns (uint256 gain) {\\n        BetLibrary.BetResult result = BetLibrary.BetResult(res);\\n        uint256 poolTotal = poolUp + poolDown;\\n        uint256 value;\\n        if (result == BetLibrary.BetResult.up && poolUp != 0) {\\n            //(upStake/poolUp)*poolTotal\\n            gain = BetLibrary.sharePool(poolTotal, upStake, poolUp);\\n        } else if (result == BetLibrary.BetResult.down && poolDown != 0) {\\n            //(downStake/poolDown)*poolTotal\\n            gain = BetLibrary.sharePool(poolTotal, downStake, poolDown);\\n        } else if (result == BetLibrary.BetResult.tie) {\\n            gain = upStake + downStake;\\n        } else {\\n            //If the winning pool is empty, all stake goes to the fees.\\n            gain = 0;\\n        }\\n    }\\n\\n    function getWindowBetPrices (uint windowNumber) public returns (uint, uint) {\\n        uint initialTimestamp = BetLibrary.getWindowStartingTimestamp(windowNumber,\\n                                                                      windowDuration,\\n                                                                      binarybet.deployTimestamp()\\n                                                                     );\\n        uint finalTimestamp = initialTimestamp + windowDuration;\\n\\n        //Window number from original binarybet contract.\\n        uint initialWindow = BetLibrary.getWindowNumber(initialTimestamp, binarybet.windowDuration(), binarybet.deployTimestamp());\\n        uint finalWindow = BetLibrary.getWindowNumber(finalTimestamp, binarybet.windowDuration(), binarybet.deployTimestamp());\\n\\n        return (binarybet.windowPrice(initialWindow), binarybet.windowPrice(finalWindow));\\n        \\n    }\\n    function getPoolValues(uint256 windowNumber)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        BetLibrary.Pool memory pool = pools[windowNumber];\\n        return (pool.downValue, pool.upValue);\\n    }\\n\\n    function getUserStake(uint256 windowNumber, address _user)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        BetLibrary.Pool memory stake = user[_user].stake[windowNumber];\\n        return (stake.downValue, stake.upValue);\\n    }\\n\\n    function getUserBetList(address _user, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return user[_user].bets[index];\\n    }\\n\\n    function betListLen(address _user) public view returns (uint256) {\\n        return user[_user].bets.length;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x695b24943e1e6fa082d822f1cd0fccd2458eeeca9221d673cdf5c0950248c06c\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620019e4380380620019e4833981016040819052620000349162000074565b6001600160601b0319606091821b811660805291901b1660a052600255620000b5565b80516001600160a01b03811681146200006f57600080fd5b919050565b6000806000606084860312156200008a57600080fd5b835192506200009c6020850162000057565b9150620000ac6040850162000057565b90509250925092565b60805160601c60a05160601c6118bd62000127600039600081816108280152610af001526000818161034201528181610a2e01528181610ba401528181610e7401528181610fd701528181611075015281816111c601528181611264015281816113c6015261148401526118bd6000f3fe6080604052600436106100b15760003560e01c8063ac4afa3811610069578063ca055e531161004e578063ca055e531461025c578063dcb3b30e1461027c578063f83b35fb1461028f57600080fd5b8063ac4afa3814610208578063b47a35661461023c57600080fd5b80635c11ff7a1161009a5780635c11ff7a1461013757806389b808a71461015b5780639626a230146101a157600080fd5b80630eff4d88146100b657806340b8405a14610115575b600080fd5b3480156100c257600080fd5b506100fb6100d136600461153f565b60009081526001602081815260409283902083518085019094528054808552920154920182905291565b604080519283526020830191909152015b60405180910390f35b34801561012157600080fd5b50610135610130366004611581565b6102af565b005b34801561014357600080fd5b5061014d60025481565b60405190815260200161010c565b34801561016757600080fd5b5061014d610176366004611581565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090206001015490565b3480156101ad57600080fd5b506100fb6101bc3660046115a3565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020818152604080832093835292815290829020825180840190935280548084526001909101549290910182905291565b34801561021457600080fd5b506100fb61022336600461153f565b6001602081905260009182526040909120805491015482565b34801561024857600080fd5b5061014d6102573660046115cf565b6108ab565b34801561026857600080fd5b5061014d61027736600461160b565b6108f8565b61013561028a366004611658565b6109be565b34801561029b57600080fd5b506100fb6102aa36600461153f565b610e4f565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902060018101546102e1575050565b60018101546000905b80156107d55760008360010160018361030391906116a5565b81548110610313576103136116bc565b90600052602060002001549050600073AE6Ff16c05C93740432136DBd15C7f4A005A5Bb163508ba0bd426002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a657600080fd5b505afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de91906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561043a57600080fd5b505af415801561044e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047291906116eb565b905060008061048084610e4f565b6040517fb134894e00000000000000000000000000000000000000000000000000000000815260048101879052602481018690526044810183905260648101829052919350915060009073AE6Ff16c05C93740432136DBd15C7f4A005A5Bb19063b134894e9060840160206040518083038186803b15801561050157600080fd5b505af4158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190611704565b9050600081600381111561054f5761054f611725565b148061056c5750600181600381111561056a5761056a611725565b145b1561057b5750505050506107c3565b6000600382600381111561059157610591611725565b1415610641576040517fc886d8a4000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273AE6Ff16c05C93740432136DBd15C7f4A005A5Bb19063c886d8a49060440160206040518083038186803b15801561060257600080fd5b505af4158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190611754565b905061065f565b600282600381111561065557610655611725565b141561065f575060025b6001808a0180549091610671916116a5565b81548110610681576106816116bc565b90600052602060002001548960010160018961069d91906116a5565b815481106106ad576106ad6116bc565b600091825260209091200155600189018054806106cc576106cc611771565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558782528a8152604080832081518083018352815481526001918201548185019081528b8652828552838620845180860190955280548086529301549484018590525181519195939461075a93919291886108f8565b9050610766818c6117a0565b9a508c73ffffffffffffffffffffffffffffffffffffffff16897f6f277b50171c654e40c771d9c2bbf19e070eeb21cce6f8e9a80334564279e395836040516107b191815260200190565b60405180910390a35050505050505050505b806107cd816117b8565b9150506102ea565b5080156108a6576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561086c57600080fd5b505af1158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a491906117ed565b505b505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081206001018054839081106108e5576108e56116bc565b9060005260206000200154905092915050565b6000808260ff16600281111561091057610910611725565b9050600061091e85876117a0565b90506000600183600281111561093657610936611725565b14801561094257508615155b1561095957610952828a89611520565b93506109b2565b600083600281111561096d5761096d611725565b14801561097957508515155b1561098957610952828988611520565b600283600281111561099d5761099d611725565b14156109ad57610952888a6117a0565b600093505b50505095945050505050565b60008111610a2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207374726963746c7920706f7369746976652076616c756573000000604482015260640160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663673a7e286040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b50505050610ab5336102af565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401602060405180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906117ed565b50600073AE6Ff16c05C93740432136DBd15C7f4A005A5Bb163508ba0bd426002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0857600080fd5b505afa158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4091906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015610c9c57600080fd5b505af4158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd491906116eb565b3360009081526020819052604090206001810154919250901580610d245750600180820180549091610d05916116a5565b81548110610d1557610d156116bc565b90600052602060002001548214155b15610d4357600180820180549182018155600090815260209020018290555b60018460ff166001811115610d5a57610d5a611725565b6001811115610d6b57610d6b611725565b1415610dc35760008281526020829052604081206001018054859290610d929084906117a0565b909155505060008281526001602081905260408220018054859290610db89084906117a0565b90915550610e0a9050565b60008281526020829052604081208054859290610de19084906117a0565b909155505060008281526001602052604081208054859290610e049084906117a0565b90915550505b6040805184815260ff86166020820152839133917f85ff162f60a0eab11e1e0d3d9cfa18a46d7038a29751af4130dbaeeadbd37ed4910160405180910390a350505050565b600080600073AE6Ff16c05C93740432136DBd15C7f4A005A5Bb163c3390901856002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed857600080fd5b505afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015610f6c57600080fd5b505af4158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa491906116eb565b9050600060025482610fb691906117a0565b9050600073AE6Ff16c05C93740432136DBd15C7f4A005A5Bb163508ba0bd847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635c11ff7a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561103b57600080fd5b505afa15801561104f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107391906116eb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111191906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561116d57600080fd5b505af4158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a591906116eb565b9050600073AE6Ff16c05C93740432136DBd15C7f4A005A5Bb163508ba0bd847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635c11ff7a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122a57600080fd5b505afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126291906116eb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130091906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561135c57600080fd5b505af4158015611370573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139491906116eb565b6040517fe0d65d87000000000000000000000000000000000000000000000000000000008152600481018490529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e0d65d879060240160206040518083038186803b15801561141d57600080fd5b505afa158015611431573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145591906116eb565b6040517fe0d65d87000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e0d65d879060240160206040518083038186803b1580156114db57600080fd5b505afa1580156114ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151391906116eb565b9550955050505050915091565b60008161152d858561180f565b611537919061184c565b949350505050565b60006020828403121561155157600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461157c57600080fd5b919050565b60006020828403121561159357600080fd5b61159c82611558565b9392505050565b600080604083850312156115b657600080fd5b823591506115c660208401611558565b90509250929050565b600080604083850312156115e257600080fd5b6115eb83611558565b946020939093013593505050565b60ff8116811461160857600080fd5b50565b600080600080600060a0868803121561162357600080fd5b85359450602086013593506040860135925060608601359150608086013561164a816115f9565b809150509295509295909350565b6000806040838503121561166b57600080fd5b82356115eb816115f9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156116b7576116b7611676565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156116fd57600080fd5b5051919050565b60006020828403121561171657600080fd5b81516004811061159c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561176657600080fd5b815161159c816115f9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082198211156117b3576117b3611676565b500190565b6000816117c7576117c7611676565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000602082840312156117ff57600080fd5b8151801515811461159c57600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561184757611847611676565b500290565b600082611882577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212208e360112ef6bac3df04c5d32efaa5db9beecf596249557189bd99eda271e1cc164736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100b15760003560e01c8063ac4afa3811610069578063ca055e531161004e578063ca055e531461025c578063dcb3b30e1461027c578063f83b35fb1461028f57600080fd5b8063ac4afa3814610208578063b47a35661461023c57600080fd5b80635c11ff7a1161009a5780635c11ff7a1461013757806389b808a71461015b5780639626a230146101a157600080fd5b80630eff4d88146100b657806340b8405a14610115575b600080fd5b3480156100c257600080fd5b506100fb6100d136600461153f565b60009081526001602081815260409283902083518085019094528054808552920154920182905291565b604080519283526020830191909152015b60405180910390f35b34801561012157600080fd5b50610135610130366004611581565b6102af565b005b34801561014357600080fd5b5061014d60025481565b60405190815260200161010c565b34801561016757600080fd5b5061014d610176366004611581565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090206001015490565b3480156101ad57600080fd5b506100fb6101bc3660046115a3565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020818152604080832093835292815290829020825180840190935280548084526001909101549290910182905291565b34801561021457600080fd5b506100fb61022336600461153f565b6001602081905260009182526040909120805491015482565b34801561024857600080fd5b5061014d6102573660046115cf565b6108ab565b34801561026857600080fd5b5061014d61027736600461160b565b6108f8565b61013561028a366004611658565b6109be565b34801561029b57600080fd5b506100fb6102aa36600461153f565b610e4f565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208190526040902060018101546102e1575050565b60018101546000905b80156107d55760008360010160018361030391906116a5565b81548110610313576103136116bc565b90600052602060002001549050600073__$686c523504a9e378bd393220b2fc4a35a6$__63508ba0bd426002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156103a657600080fd5b505afa1580156103ba573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103de91906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561043a57600080fd5b505af415801561044e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047291906116eb565b905060008061048084610e4f565b6040517fb134894e00000000000000000000000000000000000000000000000000000000815260048101879052602481018690526044810183905260648101829052919350915060009073__$686c523504a9e378bd393220b2fc4a35a6$__9063b134894e9060840160206040518083038186803b15801561050157600080fd5b505af4158015610515573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105399190611704565b9050600081600381111561054f5761054f611725565b148061056c5750600181600381111561056a5761056a611725565b145b1561057b5750505050506107c3565b6000600382600381111561059157610591611725565b1415610641576040517fc886d8a4000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273__$686c523504a9e378bd393220b2fc4a35a6$__9063c886d8a49060440160206040518083038186803b15801561060257600080fd5b505af4158015610616573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061063a9190611754565b905061065f565b600282600381111561065557610655611725565b141561065f575060025b6001808a0180549091610671916116a5565b81548110610681576106816116bc565b90600052602060002001548960010160018961069d91906116a5565b815481106106ad576106ad6116bc565b600091825260209091200155600189018054806106cc576106cc611771565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558782528a8152604080832081518083018352815481526001918201548185019081528b8652828552838620845180860190955280548086529301549484018590525181519195939461075a93919291886108f8565b9050610766818c6117a0565b9a508c73ffffffffffffffffffffffffffffffffffffffff16897f6f277b50171c654e40c771d9c2bbf19e070eeb21cce6f8e9a80334564279e395836040516107b191815260200190565b60405180910390a35050505050505050505b806107cd816117b8565b9150506102ea565b5080156108a6576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb90604401602060405180830381600087803b15801561086c57600080fd5b505af1158015610880573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a491906117ed565b505b505050565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020819052604081206001018054839081106108e5576108e56116bc565b9060005260206000200154905092915050565b6000808260ff16600281111561091057610910611725565b9050600061091e85876117a0565b90506000600183600281111561093657610936611725565b14801561094257508615155b1561095957610952828a89611520565b93506109b2565b600083600281111561096d5761096d611725565b14801561097957508515155b1561098957610952828988611520565b600283600281111561099d5761099d611725565b14156109ad57610952888a6117a0565b600093505b50505095945050505050565b60008111610a2c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207374726963746c7920706f7369746976652076616c756573000000604482015260640160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663673a7e286040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610a9457600080fd5b505af1158015610aa8573d6000803e3d6000fd5b50505050610ab5336102af565b6040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906323b872dd90606401602060405180830381600087803b158015610b4957600080fd5b505af1158015610b5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8191906117ed565b50600073__$686c523504a9e378bd393220b2fc4a35a6$__63508ba0bd426002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b158015610c0857600080fd5b505afa158015610c1c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c4091906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015610c9c57600080fd5b505af4158015610cb0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cd491906116eb565b3360009081526020819052604090206001810154919250901580610d245750600180820180549091610d05916116a5565b81548110610d1557610d156116bc565b90600052602060002001548214155b15610d4357600180820180549182018155600090815260209020018290555b60018460ff166001811115610d5a57610d5a611725565b6001811115610d6b57610d6b611725565b1415610dc35760008281526020829052604081206001018054859290610d929084906117a0565b909155505060008281526001602081905260408220018054859290610db89084906117a0565b90915550610e0a9050565b60008281526020829052604081208054859290610de19084906117a0565b909155505060008281526001602052604081208054859290610e049084906117a0565b90915550505b6040805184815260ff86166020820152839133917f85ff162f60a0eab11e1e0d3d9cfa18a46d7038a29751af4130dbaeeadbd37ed4910160405180910390a350505050565b600080600073__$686c523504a9e378bd393220b2fc4a35a6$__63c3390901856002547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b158015610ed857600080fd5b505afa158015610eec573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f1091906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b158015610f6c57600080fd5b505af4158015610f80573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fa491906116eb565b9050600060025482610fb691906117a0565b9050600073__$686c523504a9e378bd393220b2fc4a35a6$__63508ba0bd847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635c11ff7a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561103b57600080fd5b505afa15801561104f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061107391906116eb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156110d957600080fd5b505afa1580156110ed573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111191906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561116d57600080fd5b505af4158015611181573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a591906116eb565b9050600073__$686c523504a9e378bd393220b2fc4a35a6$__63508ba0bd847f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635c11ff7a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561122a57600080fd5b505afa15801561123e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061126291906116eb565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156112c857600080fd5b505afa1580156112dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061130091906116eb565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561135c57600080fd5b505af4158015611370573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061139491906116eb565b6040517fe0d65d87000000000000000000000000000000000000000000000000000000008152600481018490529091507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e0d65d879060240160206040518083038186803b15801561141d57600080fd5b505afa158015611431573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061145591906116eb565b6040517fe0d65d87000000000000000000000000000000000000000000000000000000008152600481018390527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063e0d65d879060240160206040518083038186803b1580156114db57600080fd5b505afa1580156114ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061151391906116eb565b9550955050505050915091565b60008161152d858561180f565b611537919061184c565b949350505050565b60006020828403121561155157600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461157c57600080fd5b919050565b60006020828403121561159357600080fd5b61159c82611558565b9392505050565b600080604083850312156115b657600080fd5b823591506115c660208401611558565b90509250929050565b600080604083850312156115e257600080fd5b6115eb83611558565b946020939093013593505050565b60ff8116811461160857600080fd5b50565b600080600080600060a0868803121561162357600080fd5b85359450602086013593506040860135925060608601359150608086013561164a816115f9565b809150509295509295909350565b6000806040838503121561166b57600080fd5b82356115eb816115f9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156116b7576116b7611676565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156116fd57600080fd5b5051919050565b60006020828403121561171657600080fd5b81516004811061159c57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561176657600080fd5b815161159c816115f9565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082198211156117b3576117b3611676565b500190565b6000816117c7576117c7611676565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000602082840312156117ff57600080fd5b8151801515811461159c57600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561184757611847611676565b500290565b600082611882577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea26469706673582212208e360112ef6bac3df04c5d32efaa5db9beecf596249557189bd99eda271e1cc164736f6c63430008080033",
  "libraries": {
    "BetLibrary": "0xAE6Ff16c05C93740432136DBd15C7f4A005A5Bb1"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2981,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "user",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(User)1380_storage)"
      },
      {
        "astId": 2986,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "pools",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_struct(Pool)1371_storage)"
      },
      {
        "astId": 2988,
        "contract": "contracts/DailyPool.sol:DailyPool",
        "label": "windowDuration",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(User)1380_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BetLibrary.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1380_storage"
      },
      "t_mapping(t_uint256,t_struct(Pool)1371_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BetLibrary.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)1371_storage"
      },
      "t_struct(Pool)1371_storage": {
        "encoding": "inplace",
        "label": "struct BetLibrary.Pool",
        "members": [
          {
            "astId": 1368,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "downValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1370,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "upValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)1380_storage": {
        "encoding": "inplace",
        "label": "struct BetLibrary.User",
        "members": [
          {
            "astId": 1376,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Pool)1371_storage)"
          },
          {
            "astId": 1379,
            "contract": "contracts/DailyPool.sol:DailyPool",
            "label": "bets",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}