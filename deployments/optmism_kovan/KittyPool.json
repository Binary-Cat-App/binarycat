{
  "address": "0xFa6608fB34211c12cEdbb2F0aC06e3099499E22b",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxBurn",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "binarybetContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "burnAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "NewBet",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BURN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "betListLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "binarybet",
      "outputs": [
        {
          "internalType": "contract BinaryBet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        }
      ],
      "name": "getPoolValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserBetList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxBurn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "downValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolDown",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "res",
          "type": "uint8"
        }
      ],
      "name": "settleBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x942f3a1ad4aeb496a8de0f7acbf49c1189c31add41213c733111065b31c2a153",
  "receipt": {
    "to": null,
    "from": "0x093e4A781365e1BF3a1170A24B152a46E679B33A",
    "contractAddress": "0xFa6608fB34211c12cEdbb2F0aC06e3099499E22b",
    "transactionIndex": 0,
    "gasUsed": "1398781",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x9ef90d8406b38cfb2108d17e176aaeb0eb3e1a3acc3ee0bb7fb75b2752e6637a",
    "transactionHash": "0x942f3a1ad4aeb496a8de0f7acbf49c1189c31add41213c733111065b31c2a153",
    "logs": [],
    "blockNumber": 4932290,
    "cumulativeGasUsed": "1398781",
    "status": 1,
    "byzantium": true
  },
  "args": [
    2,
    400,
    "0xedC0aD36Cd0501ADAD7bE9A39dAA824af3590320",
    "0x1732562CB113dbaEd201Caf996e56B1dAbf6dAFe",
    "0x000000000000000000000000000000000000dEaD"
  ],
  "solcInputHash": "bc724065de7df2143a09f3584d1b636a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxBurn\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"binarybetContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"burnAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BURN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"betListLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"binarybet\",\"outputs\":[{\"internalType\":\"contract BinaryBet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"}],\"name\":\"getPoolValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserBetList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxBurn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"downValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"res\",\"type\":\"uint8\"}],\"name\":\"settleBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/KittyPool.sol\":\"KittyPool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BetLibrary.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary BetLibrary {\\n    //Structs and enums\\n    enum BetSide {\\n        down,\\n        up\\n    }\\n    enum BetResult {\\n        down,\\n        up,\\n        tie\\n    }\\n    enum WindowStatus {\\n        notFinalized,\\n        waitingPrice,\\n        failedUpdate,\\n        finalized\\n    }\\n\\n    struct Pool {\\n        uint256 downValue;\\n        uint256 upValue;\\n    }\\n\\n    struct User {\\n        mapping(uint256 => Pool) stake;\\n        uint256[] bets;\\n    }\\n\\n\\n\\n    function windowStatus(\\n        uint256 window,\\n        uint256 currentWindow,\\n        uint256 initialPrice,\\n        uint256 finalPrice\\n    ) public pure returns (WindowStatus status) {\\n        if (currentWindow < window + 2) {\\n            //window not yet settled\\n            return WindowStatus.notFinalized;\\n        } else if (currentWindow < window + 3 && finalPrice == 0) {\\n            //price not updated but update still possible.\\n            return WindowStatus.waitingPrice;\\n        } else if (initialPrice == 0 || finalPrice == 0) {\\n            return WindowStatus.failedUpdate;\\n        } else {\\n            return WindowStatus.finalized;\\n        }\\n    }\\n\\n    function betResultBinary(uint256 referencePrice, uint256 settlementPrice)\\n        public\\n        pure\\n        returns (uint8)\\n    {\\n        if (settlementPrice < referencePrice) {\\n            return 0;\\n        } else if (settlementPrice > referencePrice) {\\n            return 1;\\n        }\\n        return 2;\\n    }\\n\\n    function sharePool(\\n        uint256 value,\\n        uint256 shares,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        return (shares * value) / totalShares;\\n    }\\n\\n\\n    function getWindowNumber(\\n        uint256 currentTimestamp,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 windowNumber) {\\n        //n = floor((currentTimestamp - deployTimestamp)/windowDuration  + 1)\\n        windowNumber =\\n            ((currentTimestamp - _deployTimestamp) / _windowDuration)\\n            + 1; //integer division => floor\\n    }\\n\\n    function getWindowStartingTimestamp(\\n        uint256 windowNumber,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 startingTimestamp) {\\n        //deployTimestamp + (n-1 - (offset + 1))*windowDuration\\n        startingTimestamp =\\n            _deployTimestamp +\\n            (windowNumber - 1) *\\n            _deployTimestamp;\\n    }\\n\\n    function computeFee(uint256 value, uint256 _fee)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        betFee = (value * _fee) / 100;\\n    }\\n\\n    function computeFeeCapped(uint256 value, uint256 _fee, uint cap)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        if ( (value * _fee) / 100 < cap) {\\n            betFee = (value * _fee) / 100;\\n        }\\n        else {\\n            betFee = cap;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x100ea4efa7e8468280d5acc339ef74e13538a07fbf062ff0a72642a9afbc3d0f\",\"license\":\"Apache-2.0\"},\"contracts/BinToken.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\ncontract BinToken is ERC20 {\\n    //using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"KITTY\\\";\\n    string public constant SYMBOL = \\\"KITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY =\\n        100000000 * (10**uint256(DECIMALS));\\n    uint256 public constant IDO_SUPPLY =\\n        12500000 * (10**uint256(DECIMALS));\\n\\n    mapping(address => mapping(address => uint256)) allowed;\\n\\n    constructor(address ido) ERC20(NAME, SYMBOL) {\\n        _mint(ido, IDO_SUPPLY);\\n        _mint(msg.sender, INITIAL_SUPPLY - IDO_SUPPLY);\\n    }\\n}\\n\",\"keccak256\":\"0xc41bc4caa22127ea48e686a90bf656737be43cda0a8ceedb8e8e2101792243d2\",\"license\":\"Apache-2.0\"},\"contracts/BinaryBet.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\nimport \\\"./BinaryStaking.sol\\\";\\n\\ncontract BinaryBet {\\n    //Structs and enums\\n    enum BetSide {\\n        down,\\n        up\\n    }\\n    enum BetResult {\\n        down,\\n        up,\\n        tie\\n    }\\n    enum WindowStatus {\\n        notFinalized,\\n        waitingPrice,\\n        failedUpdate,\\n        finalized\\n    }\\n\\n    struct Pool {\\n        uint256 downValue;\\n        uint256 upValue;\\n    }\\n\\n    //Other contracts interactions\\n    AggregatorV3Interface internal priceFeed;\\n    BinToken immutable token;\\n    BinaryStaking immutable staking;\\n    address payable immutable stakingAddress;\\n\\n    //Betting variables\\n    uint256 public immutable REWARD_PER_WINDOW;\\n    mapping(uint256 => Pool) public pools; //windowNumber => Pool\\n    uint256 public immutable fee;\\n    uint256 public immutable deployTimestamp;\\n\\n\\n    //Window management\\n    uint256 public immutable windowDuration; //in epoch timestamp\\n    mapping(uint256 => uint256) public windowPrice; /*first price collection\\n                                                      at the window.\\n                                                     */\\n    //User variables\\n    struct User {\\n        mapping(uint256 => Pool) stake;\\n        uint256[] bets;\\n    }\\n    mapping(address => User) user;\\n\\n    //EVENTS\\n    event NewBet(\\n        address indexed user,\\n        uint256 indexed windowNumber,\\n        uint256 value,\\n        uint8 side\\n    );\\n    event BetSettled(\\n        uint256 indexed windowNumber,\\n        address indexed user,\\n        uint256 gain\\n    );\\n    event PriceUpdated(uint256 indexed windowNumber, uint256 price);\\n\\n    constructor(\\n        uint256 _windowDuration, \\n        uint256 _fee,\\n        address aggregator,\\n        address stakingContract,\\n        address tokenContract,\\n        uint256 reward\\n    ) {\\n        require(_fee <= 100);\\n        priceFeed = AggregatorV3Interface(aggregator);\\n        deployTimestamp = block.timestamp;\\n        windowDuration = _windowDuration;\\n\\n        fee = _fee;\\n\\n        stakingAddress = payable(stakingContract);\\n        staking = BinaryStaking(stakingAddress);\\n        token = BinToken(tokenContract);\\n\\n        REWARD_PER_WINDOW = reward * 1e18;\\n    }\\n\\n    function placeBet(uint8 side) external payable {\\n        require(msg.value > 0, \\\"Only strictly positive values\\\");\\n        updatePrice();\\n        updateBalance(msg.sender);\\n\\n        uint256 windowNumber = getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            deployTimestamp\\n        );\\n\\n        User storage sender = user[msg.sender];\\n        if (sender.bets.length == 0 ||\\n            windowNumber != sender.bets[sender.bets.length - 1]) {\\n            /*\\n               Only adds to the list if its the first user bet on the window.\\n               If length is zero, the code only evaluates the first condition,\\n               avoiding the possible underflow length - 1.\\n            */\\n            sender.bets.push(windowNumber);\\n        }\\n\\n        //Update the user stake and pool for the window.\\n        if (BetSide(side) == BetSide.up) {\\n            sender.stake[windowNumber].upValue += msg.value;\\n            pools[windowNumber].upValue += msg.value;\\n        }\\n        else {\\n            sender.stake[windowNumber].downValue += msg.value;\\n            pools[windowNumber].downValue += msg.value;\\n        }\\n\\n        emit NewBet(msg.sender, windowNumber, msg.value, side);\\n    }\\n\\n    function updateBalance(address _user) public {\\n        User storage userData = user[_user];\\n        if (userData.bets.length == 0) {\\n            //No bets to settle\\n            return;\\n        }\\n\\n        uint256 totalGain = 0;\\n        uint256 totalRewards = 0;\\n        uint256 accumulatedFees = 0;\\n        for (uint256 i = userData.bets.length; i > 0; i--) {\\n            /*Maximum number of itens in list is 2, when the user bets\\n              on 2 subsequent windows and the first window is not yet settled.\\n            */\\n            uint256 window = userData.bets[i - 1];\\n            uint256 currentWindow = getWindowNumber(\\n                block.timestamp,\\n                windowDuration,\\n                deployTimestamp\\n            );\\n            (\\n                uint256 referencePrice,\\n                uint256 settlementPrice\\n            ) = getWindowBetPrices(window);\\n\\n            WindowStatus status = windowStatus(\\n                window,\\n                currentWindow,\\n                referencePrice,\\n                settlementPrice\\n            );\\n            if (\\n                status == WindowStatus.notFinalized ||\\n                status == WindowStatus.waitingPrice\\n            ) {\\n                continue;\\n            }\\n\\n            uint8 result;\\n            if (status == WindowStatus.finalized) {\\n                result = betResult(referencePrice, settlementPrice);\\n            } else if (status == WindowStatus.failedUpdate) {\\n                result = 2;\\n            }\\n\\n            //Remove window from list of unsettled bets.\\n            userData.bets[i - 1] = userData.bets[\\n                userData.bets.length - 1\\n            ];\\n            userData.bets.pop();\\n\\n            Pool memory stake = userData.stake[window];\\n            Pool memory pool = pools[window];\\n            (uint256 windowGain, uint256 fees) = settleBet(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue,\\n                result\\n            );\\n\\n            totalGain += windowGain;\\n            accumulatedFees += fees;\\n\\n            //KITTY token rewards\\n            totalRewards += calculateTokenReward(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue\\n            );\\n\\n            emit BetSettled(window, _user, windowGain);\\n        }\\n\\n        if (totalGain > 0) {\\n            payable(_user).transfer(totalGain);\\n        }\\n\\n        if (totalRewards > 0) {\\n            transferRewards(_user, totalRewards);\\n        }\\n\\n        if (accumulatedFees > 0) {\\n            staking.receiveFunds{value: accumulatedFees}();\\n        }\\n    }\\n\\n    function windowStatus(\\n        uint256 window,\\n        uint256 currentWindow,\\n        uint256 initialPrice,\\n        uint256 finalPrice\\n    ) public pure returns (WindowStatus status) {\\n        if (currentWindow < window + 2) {\\n            //window not yet settled\\n            return WindowStatus.notFinalized;\\n        } else if (currentWindow < window + 3 && finalPrice == 0) {\\n            //price not updated but update still possible.\\n            return WindowStatus.waitingPrice;\\n        } else if (initialPrice == 0 || finalPrice == 0) {\\n            return WindowStatus.failedUpdate;\\n        } else {\\n            return WindowStatus.finalized;\\n        }\\n    }\\n\\n    function transferRewards(address user, uint256 amount) internal {\\n        if (token.balanceOf(address(this)) >= amount) {\\n            token.transfer(user, amount);\\n        } else {\\n            token.transfer(user, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function settleBet(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown,\\n        uint8 res\\n    ) public view returns (uint256 gain, uint256 fees) {\\n        BetResult result = BetResult(res);\\n        uint256 poolTotal = poolUp + poolDown;\\n        uint256 value;\\n        if (result == BetResult.up && poolUp != 0) {\\n            //(upStake/poolUp)*poolTotal\\n            value = sharePool(poolTotal, upStake, poolUp);\\n            fees = computeFee(value, fee);\\n            gain = value - fees;\\n        } else if (result == BetResult.down && poolDown != 0) {\\n            //(downStake/poolDown)*poolTotal\\n            value = sharePool(poolTotal, downStake, poolDown);\\n            fees = computeFee(value, fee);\\n            gain = value - fees;\\n        } else if (result == BetResult.tie) {\\n            gain = upStake + downStake;\\n        } else {\\n            //If the winning pool is empty, all stake goes to the fees.\\n            gain = 0;\\n            fees = upStake + downStake;\\n        }\\n    }\\n\\n    function betResult(uint256 referencePrice, uint256 settlementPrice)\\n        public\\n        pure\\n        returns (uint8)\\n    {\\n        if (settlementPrice < referencePrice) {\\n            return 0;\\n        } else if (settlementPrice > referencePrice) {\\n            return 1;\\n        }\\n        return 2;\\n    }\\n\\n    function sharePool(\\n        uint256 value,\\n        uint256 shares,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        return (shares * value) / totalShares;\\n    }\\n\\n    function calculateTokenReward(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown\\n    ) public view returns (uint256) {\\n        return\\n            sharePool(\\n                REWARD_PER_WINDOW,\\n                upStake + downStake,\\n                poolUp + poolDown\\n            );\\n    }\\n\\n    function getWindowNumber(\\n        uint256 currentTimestamp,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 windowNumber) {\\n        //n = floor((currentTimestamp - deployTimestamp)/windowDuration  + 1)\\n        windowNumber =\\n            ((currentTimestamp - _deployTimestamp) / _windowDuration)\\n            + 1; //integer division => floor\\n    }\\n\\n    function getWindowStartingTimestamp(\\n        uint256 windowNumber,\\n        uint256 _windowDuration,\\n        uint256 _currentTimestamp\\n    ) public pure returns (uint256 startingTimestamp) {\\n        //deployTimestamp + (n-1 - (offset + 1))*windowDuration\\n        startingTimestamp =\\n            _currentTimestamp +\\n            (windowNumber - 1) *\\n            _windowDuration;\\n    }\\n\\n    function computeFee(uint256 value, uint256 _fee)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        betFee = (value * _fee) / 100;\\n    }\\n\\n    function updatePrice() public {\\n        uint256 window = getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            deployTimestamp\\n        );\\n        if (windowPrice[window] == 0) {\\n            windowPrice[window] = priceOracle();\\n            emit PriceUpdated(window, windowPrice[window]);\\n        }\\n    }\\n\\n    function priceOracle() internal view returns (uint256) {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    //Getters\\n    function getPoolValues(uint256 windowNumber)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Pool memory pool = pools[windowNumber];\\n        return (pool.downValue, pool.upValue);\\n    }\\n\\n    function getUserStake(uint256 windowNumber, address _user)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        Pool memory stake = user[_user].stake[windowNumber];\\n        return (stake.downValue, stake.upValue);\\n    }\\n\\n    function getWindowBetPrices(uint256 window)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (windowPrice[window + 1], windowPrice[window + 2]);\\n    }\\n\\n    function getUserBetList(address _user, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return user[_user].bets[index];\\n    }\\n\\n    function betListLen(address _user) public view returns (uint256) {\\n        return user[_user].bets.length;\\n    }\\n}\\n\",\"keccak256\":\"0x1e7386ff6ab8da8d927b2c64e23e4ce1c0b9c2a280c44cef4be80427b94794d3\",\"license\":\"Apache-2.0\"},\"contracts/BinaryStaking.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\n\\ncontract BinaryStaking is ERC20 {\\n    string public constant NAME = \\\"Staked KITTY\\\";\\n    string public constant SYMBOL = \\\"sKITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    IERC20 public binToken;\\n\\n    uint256 internal constant PRECISION_CONSTANT = 1e27;\\n    address payable owner;\\n\\n    mapping(address => uint256) public valueWhenLastReleased;\\n    uint256 public accumulatedRewards; //(per staked token)\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event Release(address indexed user, uint256 amount);\\n    event Reward(uint256 amount);\\n\\n    constructor(address token) ERC20(NAME, SYMBOL){\\n        owner = payable(msg.sender);\\n        binToken = BinToken(token);\\n    }\\n\\n    function receiveFunds() public payable {\\n        uint256 value = msg.value;\\n        if (totalSupply() != 0) {\\n            accumulatedRewards =\\n                accumulatedRewards +\\n                (value * PRECISION_CONSTANT) /\\n                totalSupply();\\n        } else {\\n            owner.transfer(value);\\n        }\\n        emit Reward(value);\\n    }\\n\\n    function stake(uint256 amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        release(msg.sender);\\n        require(binToken.transferFrom(msg.sender, address(this), amount));\\n        _mint(msg.sender, amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function unstake(uint256 amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        require(\\n            amount <= balanceOf(msg.sender),\\n            \\\"Cannot unstake more than balance\\\"\\n        );\\n\\n        release(msg.sender);\\n        _burn(msg.sender, amount);\\n\\n        binToken.transfer(msg.sender, amount);\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    function release(address user) public {\\n        if (accumulatedRewards == 0) {\\n            return;\\n        }\\n        uint256 amount = ownedDividends(user);\\n        valueWhenLastReleased[user] = accumulatedRewards;\\n\\n        if (amount > 0) {\\n            payable(user).transfer(amount);\\n            emit Release(user, amount);\\n        }\\n    }\\n\\n    function ownedDividends(address user) public view returns (uint256) {\\n        return\\n            (balanceOf(user) *\\n                (accumulatedRewards - valueWhenLastReleased[user])) /\\n            PRECISION_CONSTANT;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\\n        internal virtual override \\n    {\\n        super._beforeTokenTransfer(from, to, amount);\\n        release(from);\\n        release(to);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4b085a8ae66d468b306b43dc0d8cae3980cccd3aeac5156580ccabd1ee97d5\",\"license\":\"Apache-2.0\"},\"contracts/KittyPool.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\nimport \\\"./BinaryBet.sol\\\";\\nimport \\\"./BetLibrary.sol\\\";\\n\\ncontract KittyPool {\\n    address public immutable BURN_ADDRESS;\\n    BinaryBet public binarybet;\\n\\n    mapping(address => BetLibrary.User) user;\\n    mapping(uint256 => BetLibrary.Pool) public pools; //windowNumber => Pool\\n\\n    uint immutable fee;\\n    uint256 public immutable maxBurn;\\n    BinToken token;\\n\\n    //EVENTS\\n    event NewBet(\\n        address indexed user,\\n        uint256 indexed windowNumber,\\n        uint256 value,\\n        uint8 side\\n    );\\n    event BetSettled(\\n        uint256 indexed windowNumber,\\n        address indexed user,\\n        uint256 gain\\n    );\\n\\n    constructor(\\n        uint256 _fee,\\n        uint _maxBurn,\\n        address tokenContract,\\n        address binarybetContract,\\n        address burnAddress\\n    ) {\\n        require(_fee <= 100);\\n        fee = _fee;\\n        maxBurn = _maxBurn * 1e18;\\n        token = BinToken(tokenContract);\\n        binarybet = BinaryBet(binarybetContract);\\n        BURN_ADDRESS = burnAddress;\\n    }\\n\\n    function placeBet(uint8 side, uint value) external payable {\\n        require(value > 0, \\\"Only strictly positive values\\\");\\n        binarybet.updatePrice();\\n        updateBalance(msg.sender);\\n\\n        token.transferFrom(msg.sender, address(this), value);\\n        uint256 windowNumber = BetLibrary.getWindowNumber(\\n            block.timestamp,\\n            binarybet.windowDuration(),\\n            binarybet.deployTimestamp()\\n        );\\n\\n\\n        BetLibrary.User storage sender = user[msg.sender];\\n        if (sender.bets.length == 0 ||\\n            windowNumber != sender.bets[sender.bets.length - 1]) {\\n            /*\\n               Only adds to the list if its the first user bet on the window.\\n               If length is zero, the code only evaluates the first condition,\\n               avoiding the possible underflow length - 1.\\n            */\\n            sender.bets.push(windowNumber);\\n        }\\n\\n        //Update the user stake and pool for the window.\\n        if (BetLibrary.BetSide(side) == BetLibrary.BetSide.up) {\\n            sender.stake[windowNumber].upValue += value;\\n            pools[windowNumber].upValue += value;\\n        }\\n        else {\\n            sender.stake[windowNumber].downValue += value;\\n            pools[windowNumber].downValue += value;\\n        }\\n\\n        emit NewBet(msg.sender, windowNumber, value, side);\\n    }\\n\\n    function updateBalance(address _user) public{\\n        BetLibrary.User storage userData = user[_user];\\n        if (userData.bets.length == 0) {\\n            //No bets to settle\\n            return;\\n        }\\n\\n        uint256 totalGain = 0;\\n        uint256 accumulatedFees = 0;\\n        for (uint256 i = userData.bets.length; i > 0; i--) {\\n            /*Maximum number of itens in list is 2, when the user bets\\n              on 2 subsequent windows and the first window is not yet settled.\\n            */\\n            uint256 window = userData.bets[i - 1];\\n            uint256 currentWindow = BetLibrary.getWindowNumber(\\n                block.timestamp,\\n                binarybet.windowDuration(),\\n                binarybet.deployTimestamp()\\n            );\\n            (\\n                uint256 referencePrice,\\n                uint256 settlementPrice\\n            ) = binarybet.getWindowBetPrices(window);\\n\\n            BetLibrary.WindowStatus status = BetLibrary.windowStatus(\\n                window,\\n                currentWindow,\\n                referencePrice,\\n                settlementPrice\\n            );\\n            if (\\n                status == BetLibrary.WindowStatus.notFinalized ||\\n                status == BetLibrary.WindowStatus.waitingPrice\\n            ) {\\n                continue;\\n            }\\n\\n            uint8 result;\\n            if (status == BetLibrary.WindowStatus.finalized) {\\n                result = BetLibrary.betResultBinary(referencePrice, settlementPrice);\\n            } else if (status == BetLibrary.WindowStatus.failedUpdate) {\\n                result = 2;\\n            }\\n\\n            //Remove window from list of unsettled bets.\\n            userData.bets[i - 1] = userData.bets[\\n                userData.bets.length - 1\\n            ];\\n            userData.bets.pop();\\n\\n            BetLibrary.Pool memory stake = userData.stake[window];\\n            BetLibrary.Pool memory pool = pools[window];\\n            (uint256 windowGain, uint256 fees) = settleBet(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue,\\n                result\\n            );\\n\\n            totalGain += windowGain;\\n            accumulatedFees += fees;\\n\\n            emit BetSettled(window, _user, windowGain);\\n        }\\n\\n\\n        if (totalGain > 0) {\\n            token.transfer(_user, totalGain);\\n        }\\n\\n        if (accumulatedFees > 0) {\\n            if (token.balanceOf(address(binarybet)) > 0) {\\n                token.transfer(BURN_ADDRESS, accumulatedFees);\\n            }\\n            else {\\n                token.transfer(address(binarybet), accumulatedFees);\\n            }\\n        }\\n    }\\n\\n    function settleBet(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown,\\n        uint8 res\\n    ) public view returns (uint256 gain, uint256 fees) {\\n        BetLibrary.BetResult result = BetLibrary.BetResult(res);\\n        uint256 poolTotal = poolUp + poolDown;\\n        uint256 value;\\n        if (result == BetLibrary.BetResult.up && poolUp != 0) {\\n            //(upStake/poolUp)*poolTotal\\n            value = BetLibrary.sharePool(poolTotal, upStake, poolUp);\\n            fees = BetLibrary.computeFeeCapped(value, fee, maxBurn);\\n            gain = value - fees;\\n        } else if (result == BetLibrary.BetResult.down && poolDown != 0) {\\n            //(downStake/poolDown)*poolTotal\\n            value = BetLibrary.sharePool(poolTotal, downStake, poolDown);\\n            fees = BetLibrary.computeFeeCapped(value, fee, maxBurn);\\n            gain = value - fees;\\n        } else if (result == BetLibrary.BetResult.tie) {\\n            gain = upStake + downStake;\\n        } else {\\n            //If the winning pool is empty, all stake goes to the fees.\\n            gain = 0;\\n            fees = upStake + downStake;\\n        }\\n    }\\n\\n    function getPoolValues(uint256 windowNumber)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        BetLibrary.Pool memory pool = pools[windowNumber];\\n        return (pool.downValue, pool.upValue);\\n    }\\n\\n    function getUserStake(uint256 windowNumber, address _user)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        BetLibrary.Pool memory stake = user[_user].stake[windowNumber];\\n        return (stake.downValue, stake.upValue);\\n    }\\n\\n    function getUserBetList(address _user, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return user[_user].bets[index];\\n    }\\n\\n    function betListLen(address _user) public view returns (uint256) {\\n        return user[_user].bets.length;\\n    }\\n\\n\\n}\\n\",\"keccak256\":\"0x10874f5e7b80bd85d5613d23c4e3c6fb91a0782870b9f6c5cdc5a2ca62af5170\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x60e06040523480156200001157600080fd5b5060405162001921380380620019218339810160408190526200003491620000c6565b60648511156200004357600080fd5b60a08590526200005c84670de0b6b3a764000062000124565b60c052600380546001600160a01b03199081166001600160a01b039586161790915560008054909116929093169190911790915560601b6001600160601b03191660805250620001529050565b80516001600160a01b0381168114620000c157600080fd5b919050565b600080600080600060a08688031215620000df57600080fd5b8551945060208601519350620000f860408701620000a9565b92506200010860608701620000a9565b91506200011860808701620000a9565b90509295509295909350565b60008160001904831182151516156200014d57634e487b7160e01b600052601160045260246000fd5b500290565b60805160601c60a05160c05161178e62000193600039600081816102ed0152610da101526000610d7b0152600081816103210152610b5b015261178e6000f3fe6080604052600436106100bc5760003560e01c8063acc1971d11610074578063dcb3b30e1161004e578063dcb3b30e146102c8578063e316c3eb146102db578063fccc28131461030f57600080fd5b8063acc1971d14610236578063b47a356614610288578063ca055e53146102a857600080fd5b806389b808a7116100a557806389b808a7146101475780639626a2301461019c578063ac4afa381461020257600080fd5b80630eff4d88146100c157806340b8405a14610125575b600080fd5b3480156100cd57600080fd5b5061010b6100dc3660046113ec565b600090815260026020908152604091829020825180840190935280548084526001909101549290910182905291565b604080519283526020830191909152015b60405180910390f35b34801561013157600080fd5b5061014561014036600461142e565b610343565b005b34801561015357600080fd5b5061018e61016236600461142e565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160208190526040909120015490565b60405190815260200161011c565b3480156101a857600080fd5b5061010b6101b7366004611450565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020818152604080842094845293815291839020835180850190945280548085529101549290910182905291565b34801561020e57600080fd5b5061010b61021d3660046113ec565b6002602052600090815260409020805460019091015482565b34801561024257600080fd5b506000546102639073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011c565b34801561029457600080fd5b5061018e6102a336600461147c565b610ca3565b3480156102b457600080fd5b5061010b6102c33660046114b8565b610cf0565b6101456102d6366004611505565b610ebc565b3480156102e757600080fd5b5061018e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031b57600080fd5b506102637f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020819052604090912090810154610377575050565b600181015460009081905b80156109b35760008460010160018361039b9190611552565b815481106103ab576103ab611569565b90600052602060002001549050600073a8F69065d3fF0F01234E782750Fc8A8ffB391fcb63508ba0bd4260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c11ff7a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043b57600080fd5b505afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190611598565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d957600080fd5b505afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105119190611598565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561056d57600080fd5b505af4158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190611598565b600080546040517ff83b35fb000000000000000000000000000000000000000000000000000000008152600481018690529293509091829173ffffffffffffffffffffffffffffffffffffffff169063f83b35fb90602401604080518083038186803b15801561061457600080fd5b505afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c91906115b1565b6040517fb134894e00000000000000000000000000000000000000000000000000000000815260048101879052602481018690526044810183905260648101829052919350915060009073a8F69065d3fF0F01234E782750Fc8A8ffB391fcb9063b134894e9060840160206040518083038186803b1580156106cd57600080fd5b505af41580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070591906115d5565b9050600081600381111561071b5761071b6115f6565b148061073857506001816003811115610736576107366115f6565b145b156107475750505050506109a1565b6000600382600381111561075d5761075d6115f6565b141561080d576040517fc886d8a4000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273a8F69065d3fF0F01234E782750Fc8A8ffB391fcb9063c886d8a49060440160206040518083038186803b1580156107ce57600080fd5b505af41580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190611625565b905061082b565b6002826003811115610821576108216115f6565b141561082b575060025b6001808b018054909161083d91611552565b8154811061084d5761084d611569565b90600052602060002001548a6001016001896108699190611552565b8154811061087957610879611569565b60009182526020909120015560018a0180548061089857610898611642565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558782528b8152604080832081518083018352815481526001918201548185019081528b8652600285528386208451808601909552805480865293015494840185905251815191959394849361092893919089610cf0565b9092509050610937828e611671565b9c50610943818d611671565b9b508e73ffffffffffffffffffffffffffffffffffffffff168a7f6f277b50171c654e40c771d9c2bbf19e070eeb21cce6f8e9a80334564279e3958460405161098e91815260200190565b60405180910390a3505050505050505050505b806109ab81611689565b915050610382565b508115610a68576003546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6691906116be565b505b8015610c9d57600354600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152919216906370a082319060240160206040518083038186803b158015610add57600080fd5b505afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611598565b1115610bed576003546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be791906116be565b50610c9d565b6003546000546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9b91906116be565b505b50505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160208190526040822001805483908110610cdd57610cdd611569565b9060005260206000200154905092915050565b60008060008360ff166002811115610d0a57610d0a6115f6565b90506000610d188688611671565b905060006001836002811115610d3057610d306115f6565b148015610d3c57508715155b15610e4a57610d4c828b8a6113cd565b6040517f366eedf4000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000060248201527f0000000000000000000000000000000000000000000000000000000000000000604482015290915073a8F69065d3fF0F01234E782750Fc8A8ffB391fcb9063366eedf49060640160206040518083038186803b158015610dff57600080fd5b505af4158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190611598565b9350610e438482611552565b9450610eaf565b6000836002811115610e5e57610e5e6115f6565b148015610e6a57508615155b15610e7a57610d4c828a896113cd565b6002836002811115610e8e57610e8e6115f6565b1415610e9e57610e43898b611671565b60009450610eac898b611671565b93505b5050509550959350505050565b60008111610f2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207374726963746c7920706f7369746976652076616c756573000000604482015260640160405180910390fd5b60008054604080517f673a7e28000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263673a7e289260048084019382900301818387803b158015610f9157600080fd5b505af1158015610fa5573d6000803e3d6000fd5b50505050610fb233610343565b6003546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906116be565b50600073a8F69065d3fF0F01234E782750Fc8A8ffB391fcb63508ba0bd4260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c11ff7a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e657600080fd5b505afa1580156110fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111e9190611598565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561118457600080fd5b505afa158015611198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bc9190611598565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561121857600080fd5b505af415801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190611598565b336000908152600160208190526040909120908101549192509015806112a2575060018082018054909161128391611552565b8154811061129357611293611569565b90600052602060002001548214155b156112c157600180820180549182018155600090815260209020018290555b60018460ff1660018111156112d8576112d86115f6565b60018111156112e9576112e96115f6565b14156113415760008281526020829052604081206001018054859290611310908490611671565b909155505060008281526002602052604081206001018054859290611336908490611671565b909155506113889050565b6000828152602082905260408120805485929061135f908490611671565b909155505060008281526002602052604081208054859290611382908490611671565b90915550505b6040805184815260ff86166020820152839133917f85ff162f60a0eab11e1e0d3d9cfa18a46d7038a29751af4130dbaeeadbd37ed4910160405180910390a350505050565b6000816113da85856116e0565b6113e4919061171d565b949350505050565b6000602082840312156113fe57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461142957600080fd5b919050565b60006020828403121561144057600080fd5b61144982611405565b9392505050565b6000806040838503121561146357600080fd5b8235915061147360208401611405565b90509250929050565b6000806040838503121561148f57600080fd5b61149883611405565b946020939093013593505050565b60ff811681146114b557600080fd5b50565b600080600080600060a086880312156114d057600080fd5b8535945060208601359350604086013592506060860135915060808601356114f7816114a6565b809150509295509295909350565b6000806040838503121561151857600080fd5b8235611498816114a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561156457611564611523565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156115aa57600080fd5b5051919050565b600080604083850312156115c457600080fd5b505080516020909101519092909150565b6000602082840312156115e757600080fd5b81516004811061144957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561163757600080fd5b8151611449816114a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000821982111561168457611684611523565b500190565b60008161169857611698611523565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000602082840312156116d057600080fd5b8151801515811461144957600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561171857611718611523565b500290565b600082611753577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220a4d66a408bc4ad2b3bd1c7b32cccd2442af49ae6acfce308db6febc02d16ca1664736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100bc5760003560e01c8063acc1971d11610074578063dcb3b30e1161004e578063dcb3b30e146102c8578063e316c3eb146102db578063fccc28131461030f57600080fd5b8063acc1971d14610236578063b47a356614610288578063ca055e53146102a857600080fd5b806389b808a7116100a557806389b808a7146101475780639626a2301461019c578063ac4afa381461020257600080fd5b80630eff4d88146100c157806340b8405a14610125575b600080fd5b3480156100cd57600080fd5b5061010b6100dc3660046113ec565b600090815260026020908152604091829020825180840190935280548084526001909101549290910182905291565b604080519283526020830191909152015b60405180910390f35b34801561013157600080fd5b5061014561014036600461142e565b610343565b005b34801561015357600080fd5b5061018e61016236600461142e565b73ffffffffffffffffffffffffffffffffffffffff166000908152600160208190526040909120015490565b60405190815260200161011c565b3480156101a857600080fd5b5061010b6101b7366004611450565b73ffffffffffffffffffffffffffffffffffffffff16600090815260016020818152604080842094845293815291839020835180850190945280548085529101549290910182905291565b34801561020e57600080fd5b5061010b61021d3660046113ec565b6002602052600090815260409020805460019091015482565b34801561024257600080fd5b506000546102639073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161011c565b34801561029457600080fd5b5061018e6102a336600461147c565b610ca3565b3480156102b457600080fd5b5061010b6102c33660046114b8565b610cf0565b6101456102d6366004611505565b610ebc565b3480156102e757600080fd5b5061018e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561031b57600080fd5b506102637f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260016020819052604090912090810154610377575050565b600181015460009081905b80156109b35760008460010160018361039b9190611552565b815481106103ab576103ab611569565b90600052602060002001549050600073__$686c523504a9e378bd393220b2fc4a35a6$__63508ba0bd4260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c11ff7a6040518163ffffffff1660e01b815260040160206040518083038186803b15801561043b57600080fd5b505afa15801561044f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104739190611598565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d957600080fd5b505afa1580156104ed573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105119190611598565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561056d57600080fd5b505af4158015610581573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a59190611598565b600080546040517ff83b35fb000000000000000000000000000000000000000000000000000000008152600481018690529293509091829173ffffffffffffffffffffffffffffffffffffffff169063f83b35fb90602401604080518083038186803b15801561061457600080fd5b505afa158015610628573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064c91906115b1565b6040517fb134894e00000000000000000000000000000000000000000000000000000000815260048101879052602481018690526044810183905260648101829052919350915060009073__$686c523504a9e378bd393220b2fc4a35a6$__9063b134894e9060840160206040518083038186803b1580156106cd57600080fd5b505af41580156106e1573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070591906115d5565b9050600081600381111561071b5761071b6115f6565b148061073857506001816003811115610736576107366115f6565b145b156107475750505050506109a1565b6000600382600381111561075d5761075d6115f6565b141561080d576040517fc886d8a4000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273__$686c523504a9e378bd393220b2fc4a35a6$__9063c886d8a49060440160206040518083038186803b1580156107ce57600080fd5b505af41580156107e2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108069190611625565b905061082b565b6002826003811115610821576108216115f6565b141561082b575060025b6001808b018054909161083d91611552565b8154811061084d5761084d611569565b90600052602060002001548a6001016001896108699190611552565b8154811061087957610879611569565b60009182526020909120015560018a0180548061089857610898611642565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558782528b8152604080832081518083018352815481526001918201548185019081528b8652600285528386208451808601909552805480865293015494840185905251815191959394849361092893919089610cf0565b9092509050610937828e611671565b9c50610943818d611671565b9b508e73ffffffffffffffffffffffffffffffffffffffff168a7f6f277b50171c654e40c771d9c2bbf19e070eeb21cce6f8e9a80334564279e3958460405161098e91815260200190565b60405180910390a3505050505050505050505b806109ab81611689565b915050610382565b508115610a68576003546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018590529091169063a9059cbb90604401602060405180830381600087803b158015610a2e57600080fd5b505af1158015610a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6691906116be565b505b8015610c9d57600354600080546040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9182166004820152919216906370a082319060240160206040518083038186803b158015610add57600080fd5b505afa158015610af1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b159190611598565b1115610bed576003546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018490529091169063a9059cbb90604401602060405180830381600087803b158015610baf57600080fd5b505af1158015610bc3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610be791906116be565b50610c9d565b6003546000546040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff91821660048201526024810184905291169063a9059cbb90604401602060405180830381600087803b158015610c6357600080fd5b505af1158015610c77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c9b91906116be565b505b50505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600160208190526040822001805483908110610cdd57610cdd611569565b9060005260206000200154905092915050565b60008060008360ff166002811115610d0a57610d0a6115f6565b90506000610d188688611671565b905060006001836002811115610d3057610d306115f6565b148015610d3c57508715155b15610e4a57610d4c828b8a6113cd565b6040517f366eedf4000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000060248201527f0000000000000000000000000000000000000000000000000000000000000000604482015290915073__$686c523504a9e378bd393220b2fc4a35a6$__9063366eedf49060640160206040518083038186803b158015610dff57600080fd5b505af4158015610e13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e379190611598565b9350610e438482611552565b9450610eaf565b6000836002811115610e5e57610e5e6115f6565b148015610e6a57508615155b15610e7a57610d4c828a896113cd565b6002836002811115610e8e57610e8e6115f6565b1415610e9e57610e43898b611671565b60009450610eac898b611671565b93505b5050509550959350505050565b60008111610f2a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207374726963746c7920706f7369746976652076616c756573000000604482015260640160405180910390fd5b60008054604080517f673a7e28000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff9092169263673a7e289260048084019382900301818387803b158015610f9157600080fd5b505af1158015610fa5573d6000803e3d6000fd5b50505050610fb233610343565b6003546040517f23b872dd0000000000000000000000000000000000000000000000000000000081523360048201523060248201526044810183905273ffffffffffffffffffffffffffffffffffffffff909116906323b872dd90606401602060405180830381600087803b15801561102a57600080fd5b505af115801561103e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106291906116be565b50600073__$686c523504a9e378bd393220b2fc4a35a6$__63508ba0bd4260008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635c11ff7a6040518163ffffffff1660e01b815260040160206040518083038186803b1580156110e657600080fd5b505afa1580156110fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061111e9190611598565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663607ad0d76040518163ffffffff1660e01b815260040160206040518083038186803b15801561118457600080fd5b505afa158015611198573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111bc9190611598565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815260048101939093526024830191909152604482015260640160206040518083038186803b15801561121857600080fd5b505af415801561122c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112509190611598565b336000908152600160208190526040909120908101549192509015806112a2575060018082018054909161128391611552565b8154811061129357611293611569565b90600052602060002001548214155b156112c157600180820180549182018155600090815260209020018290555b60018460ff1660018111156112d8576112d86115f6565b60018111156112e9576112e96115f6565b14156113415760008281526020829052604081206001018054859290611310908490611671565b909155505060008281526002602052604081206001018054859290611336908490611671565b909155506113889050565b6000828152602082905260408120805485929061135f908490611671565b909155505060008281526002602052604081208054859290611382908490611671565b90915550505b6040805184815260ff86166020820152839133917f85ff162f60a0eab11e1e0d3d9cfa18a46d7038a29751af4130dbaeeadbd37ed4910160405180910390a350505050565b6000816113da85856116e0565b6113e4919061171d565b949350505050565b6000602082840312156113fe57600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461142957600080fd5b919050565b60006020828403121561144057600080fd5b61144982611405565b9392505050565b6000806040838503121561146357600080fd5b8235915061147360208401611405565b90509250929050565b6000806040838503121561148f57600080fd5b61149883611405565b946020939093013593505050565b60ff811681146114b557600080fd5b50565b600080600080600060a086880312156114d057600080fd5b8535945060208601359350604086013592506060860135915060808601356114f7816114a6565b809150509295509295909350565b6000806040838503121561151857600080fd5b8235611498816114a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008282101561156457611564611523565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156115aa57600080fd5b5051919050565b600080604083850312156115c457600080fd5b505080516020909101519092909150565b6000602082840312156115e757600080fd5b81516004811061144957600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561163757600080fd5b8151611449816114a6565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b6000821982111561168457611684611523565b500190565b60008161169857611698611523565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b6000602082840312156116d057600080fd5b8151801515811461144957600080fd5b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561171857611718611523565b500290565b600082611753577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea2646970667358221220a4d66a408bc4ad2b3bd1c7b32cccd2442af49ae6acfce308db6febc02d16ca1664736f6c63430008080033",
  "libraries": {
    "BetLibrary": "0xa8F69065d3fF0F01234E782750Fc8A8ffB391fcb"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4667,
        "contract": "contracts/KittyPool.sol:KittyPool",
        "label": "binarybet",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(BinaryBet)2799"
      },
      {
        "astId": 4672,
        "contract": "contracts/KittyPool.sol:KittyPool",
        "label": "user",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(User)1512_storage)"
      },
      {
        "astId": 4677,
        "contract": "contracts/KittyPool.sol:KittyPool",
        "label": "pools",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_struct(Pool)1503_storage)"
      },
      {
        "astId": 4684,
        "contract": "contracts/KittyPool.sol:KittyPool",
        "label": "token",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(BinToken)1781"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(BinToken)1781": {
        "encoding": "inplace",
        "label": "contract BinToken",
        "numberOfBytes": "20"
      },
      "t_contract(BinaryBet)2799": {
        "encoding": "inplace",
        "label": "contract BinaryBet",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(User)1512_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BetLibrary.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1512_storage"
      },
      "t_mapping(t_uint256,t_struct(Pool)1503_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BetLibrary.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)1503_storage"
      },
      "t_struct(Pool)1503_storage": {
        "encoding": "inplace",
        "label": "struct BetLibrary.Pool",
        "members": [
          {
            "astId": 1500,
            "contract": "contracts/KittyPool.sol:KittyPool",
            "label": "downValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1502,
            "contract": "contracts/KittyPool.sol:KittyPool",
            "label": "upValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)1512_storage": {
        "encoding": "inplace",
        "label": "struct BetLibrary.User",
        "members": [
          {
            "astId": 1508,
            "contract": "contracts/KittyPool.sol:KittyPool",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Pool)1503_storage)"
          },
          {
            "astId": 1511,
            "contract": "contracts/KittyPool.sol:KittyPool",
            "label": "bets",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}