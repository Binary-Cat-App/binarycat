{
  "address": "0x412b37ED0a39F179105Fc9d82d1d0F9d010a137a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_windowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "aggregator",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        }
      ],
      "name": "betSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "newBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "priceUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accumulatedFees",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "betListLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "referencePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "settlementPrice",
          "type": "uint256"
        }
      ],
      "name": "betResult",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolDown",
          "type": "uint256"
        }
      ],
      "name": "calculateTokenReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newGovernance",
          "type": "address"
        }
      ],
      "name": "changeGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowSize",
          "type": "uint256"
        }
      ],
      "name": "changeWindowSize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        }
      ],
      "name": "computeFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "betFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "firstWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        }
      ],
      "name": "getPoolValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserBetList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "getWindowBetPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_windowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_windowOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstWindow",
          "type": "uint256"
        }
      ],
      "name": "getWindowNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_windowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_firstBlock",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_windowOffset",
          "type": "uint256"
        }
      ],
      "name": "getWindowStartingBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "startingBlock",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "downValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        }
      ],
      "name": "setStakingAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        }
      ],
      "name": "setTokenAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolDown",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "betResult",
          "type": "uint8"
        }
      ],
      "name": "settleBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "downValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upValue",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userBets",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "userStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "downValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "windowDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "windowOffset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "windowPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6e42132ca7b0e74ffd1f397e7f7b8002855ad4f41f604e19b3774b366209e2c0",
  "receipt": {
    "to": null,
    "from": "0xb9249FC2c91232926243a7b70397f5775286a1a6",
    "contractAddress": "0x412b37ED0a39F179105Fc9d82d1d0F9d010a137a",
    "transactionIndex": 1,
    "gasUsed": "2525010",
    "logsBloom": "0x
    "blockHash": "0xce3f3b044d2ed11febe5844377a04901d7e500c0612e0c93640eb8f04738249a",
    "transactionHash": "0x6e42132ca7b0e74ffd1f397e7f7b8002855ad4f41f604e19b3774b366209e2c0",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 18470038,
        "transactionHash": "0x6e42132ca7b0e74ffd1f397e7f7b8002855ad4f41f604e19b3774b366209e2c0",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000b9249fc2c91232926243a7b70397f5775286a1a6",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000047c3dda0d5a0000000000000000000000000000000000000000000000000000b01e290cd34eacc00000000000000000000000000000000000000000000015933971dd35fdb3c760000000000000000000000000000000000000000000000000aba1eb32c5f4acc00000000000000000000000000000000000000000000015933dee1b100b0dc76",
        "logIndex": 1,
        "blockHash": "0xce3f3b044d2ed11febe5844377a04901d7e500c0612e0c93640eb8f04738249a"
      }
    ],
    "blockNumber": 18470038,
    "cumulativeGasUsed": "2617301",
    "status": 1,
    "byzantium": true
  },
  "args": [
    300,
    2,
    "0x0715A7794a1dc8e42615F059dD6e406A6594651A"
  ],
  "solcInputHash": "2935650ba543671bf48aeb3248121398",
  "metadata": "{\"compiler\":{\"version\":\"0.8.0+commit.c7dfd78e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_windowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aggregator\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"}],\"name\":\"betSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"newBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"priceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accumulatedFees\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"betListLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"referencePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"settlementPrice\",\"type\":\"uint256\"}],\"name\":\"betResult\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDown\",\"type\":\"uint256\"}],\"name\":\"calculateTokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newGovernance\",\"type\":\"address\"}],\"name\":\"changeGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowSize\",\"type\":\"uint256\"}],\"name\":\"changeWindowSize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"}],\"name\":\"computeFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"betFee\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"firstWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"}],\"name\":\"getPoolValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserBetList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"getWindowBetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstWindow\",\"type\":\"uint256\"}],\"name\":\"getWindowNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_firstBlock\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_windowOffset\",\"type\":\"uint256\"}],\"name\":\"getWindowStartingBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"startingBlock\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"downValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"}],\"name\":\"setStakingAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"}],\"name\":\"setTokenAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"betResult\",\"type\":\"uint8\"}],\"name\":\"settleBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"downValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upValue\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userBets\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"userStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"downValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"windowDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"windowOffset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"windowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BinaryBet.sol\":\"BinaryBet\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin guidelines: functions revert instead\\n * of returning `false` on failure. This behavior is nonetheless conventional\\n * and does not conflict with the expectations of ERC20 applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5,05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `recipient` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n        _transfer(_msgSender(), recipient, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        _approve(_msgSender(), spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` and `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``sender``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        _transfer(sender, recipient, amount);\\n\\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\\n        require(currentAllowance >= amount, \\\"ERC20: transfer amount exceeds allowance\\\");\\n        unchecked {\\n            _approve(sender, _msgSender(), currentAllowance - amount);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `sender` cannot be the zero address.\\n     * - `recipient` cannot be the zero address.\\n     * - `sender` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) internal virtual {\\n        require(sender != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(recipient != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(sender, recipient, amount);\\n\\n        uint256 senderBalance = _balances[sender];\\n        require(senderBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[sender] = senderBalance - amount;\\n        }\\n        _balances[recipient] += amount;\\n\\n        emit Transfer(sender, recipient, amount);\\n\\n        _afterTokenTransfer(sender, recipient, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x418cfe64226a974419f8ab7287ad4bb413156a4d7af8ab5d9bcaa5678d1a2f22\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x83fe24f5c04a56091e50f4a345ff504c8bff658a76d4c43b16878c8f940c53b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x95098bd1d9c8dec4d80d3dedb88a0d949fa0d740ee99f2aa466bc308216ca6d5\",\"license\":\"MIT\"},\"contracts/BinToken.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n//import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n\\ncontract BinToken is ERC20{\\n    //using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"KITTY\\\";\\n    string public constant SYMBOL = \\\"KITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY = 100000000 * (10 ** uint256(DECIMALS));\\n\\n\\n    mapping (address => mapping(address => uint)) allowed;\\n\\n    constructor()\\n        ERC20(NAME, SYMBOL) public\\n    {\\n        _mint(msg.sender, INITIAL_SUPPLY);\\n    }\\n}\\n\",\"keccak256\":\"0x8a08421eb41ab5785f67b9277ef5a6577e9f757db1e9fd82e1870ac04c0fc23b\"},\"contracts/BinaryBet.sol\":{\"content\":\"pragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\nimport \\\"./BinaryStaking.sol\\\";\\n\\n\\n//SPDX-License-Identifier: UNLICENSED\\ncontract BinaryBet {\\n    //Structs and enums\\n    enum BetSide {down, up} \\n    enum BetResult {down, up, tie}\\n\\n    struct Pool {\\n        uint downValue;\\n        uint upValue;\\n    }\\n\\n    //Betting parameters\\n    AggregatorV3Interface internal priceFeed;  \\n    address governance;\\n    uint public fee;\\n    uint public windowDuration; //in blocks\\n    uint public firstBlock;\\n    BinaryStaking staking; \\n    address payable stakingAddress;\\n\\n    BinToken token;\\n    address tokenAddress;\\n\\n\\n    //Window management\\n    mapping (uint => Pool) public pools; //windowNumber => Pool\\n    mapping(uint => uint256) public  windowPrice; //first price collection at the window.\\n    uint public firstWindow = 1; //Any bet before first block of betting is directed to the first window.\\n    uint public windowOffset; //used make window continuous and monotonically increasing when window duration and first block changes.\\n    uint public accumulatedFees;\\n\\n    //User variables\\n    mapping (address => mapping(uint => Pool)) public  userStake;\\n    mapping (address => uint[]) public userBets;\\n    mapping (address => mapping(uint => bool)) userBetted;\\n\\n\\n    //EVENTS\\n    event newBet(address indexed user, uint indexed windowNumber, uint value, uint8 side);\\n    event betSettled(uint indexed windowNumber, address indexed user, uint gain);\\n    event priceUpdated(uint indexed windowNumber, uint256 price);\\n\\n    \\n    modifier onlyGovernance() {\\n        require(msg.sender == governance, \\\"only governance can call this method\\\");\\n        _;\\n    }\\n\\n    constructor(uint _windowDuration, uint _fee, address aggregator) public {\\n        require(_fee <= 100);\\n        priceFeed = AggregatorV3Interface(aggregator);\\n        firstBlock = block.number;\\n        windowDuration = _windowDuration;\\n\\n        fee = _fee;\\n        governance = msg.sender;\\n        firstWindow = 1;\\n    }\\n//=============GOVERNANCE FUNCTIONS=============================================\\n    function changeGovernance(address newGovernance) onlyGovernance public{\\n        governance = newGovernance;\\n    }\\n\\n    function changeWindowSize(uint windowSize) onlyGovernance public {\\n        require(windowSize > 0, \\\"window size should be strictly positive\\\");\\n        uint currentWindow = getWindowNumber(block.number, windowDuration, firstBlock, windowOffset, firstWindow);\\n        firstBlock = getWindowStartingBlock(currentWindow + 1, windowDuration, firstBlock, windowOffset);\\n        windowOffset = currentWindow;\\n        firstWindow = currentWindow;\\n        windowDuration = windowSize;\\n    }\\n//==============================================================================\\n\\n    function setStakingAddress(address stakingContract) external {\\n        require(stakingAddress == address(0), \\\"staking address already set\\\");\\n        stakingAddress = payable(stakingContract);\\n        staking = BinaryStaking(stakingAddress); \\n    }\\n\\n    function setTokenAddress(address tokenContract) external {\\n        require(tokenAddress == address(0), \\\"token address already set\\\");\\n        tokenAddress = tokenContract;\\n        token = BinToken(tokenAddress); \\n    }\\n\\n\\n    function placeBet (uint8 side) payable external {\\n        require(msg.value > 0, \\\"Only strictly positive values\\\");\\n        updatePrice();\\n        updateBalance();\\n\\n        uint betFee = computeFee(msg.value, fee); \\n        accumulatedFees = accumulatedFees + betFee;\\n        uint value = msg.value - betFee;\\n\\n        uint windowNumber = getWindowNumber(block.number, windowDuration, firstBlock, windowOffset, firstWindow);\\n        if(!userBetted[msg.sender][windowNumber]) {\\n            //only adds the bet to the list if it is the first time the user bets at the window\\n            userBets[msg.sender].push(windowNumber);\\n            userBetted[msg.sender][windowNumber] = true;\\n        }\\n        \\n        //Update the pool for the window.\\n        Pool memory oldPool = pools[windowNumber];\\n        (uint newDown, uint newUp) = updatePool(oldPool.downValue, oldPool.upValue, side, value);\\n        pools[windowNumber] = Pool(newDown, newUp);\\n\\n        //Update the user stake for the window.\\n        Pool memory oldStake = userStake[msg.sender][windowNumber];\\n        (newDown, newUp) = updatePool(oldStake.downValue, oldStake.upValue, side, value);\\n        userStake[msg.sender][windowNumber] = Pool(newDown, newUp);\\n\\n        emit newBet(msg.sender, windowNumber, value, side);\\n    }\\n\\n    function updateBalance() public {\\n        uint[] storage userWindowsList = userBets[msg.sender];\\n        if(userWindowsList.length == 0) {\\n            //No bets to settle\\n            return;\\n        }\\n\\n        uint totalGain = 0;\\n        for(uint i = userWindowsList.length; i > 0; i--) {\\n            //Maximum number of itens in list is 2, when the user bets on 2 subsequent windows and the first window is not yet settled.\\n            uint window = userWindowsList[i-1];\\n            uint currentWindow = getWindowNumber(block.number, windowDuration, firstBlock, windowOffset, firstWindow);\\n            if(currentWindow < window + 2) {\\n                //window not yet settled\\n                continue;\\n            }\\n\\n            (uint256 referencePrice, uint256 settlementPrice) = getWindowBetPrices(window);\\n            if (settlementPrice == 0 && currentWindow < window + 3) {\\n                //price not updated but update still possible.\\n                continue;\\n            } \\n\\n            uint8 result = betResult(referencePrice, settlementPrice);\\n            if (referencePrice == 0 || settlementPrice == 0) {\\n                //if the price was not updated for the window it is considered a tie and players can get their money back.\\n                result = 2;\\n            }\\n\\n            //Remove window from list of unsettled bets.\\n            userWindowsList[i-1] = userWindowsList[userWindowsList.length -1];\\n            userWindowsList.pop();\\n\\n            Pool memory stake = userStake[msg.sender][window];\\n            Pool memory pool = pools[window];\\n            (uint windowGain, uint fees) = settleBet(stake.upValue, stake.downValue, pool.upValue, pool.downValue, result);\\n\\n            totalGain = totalGain + windowGain;\\n            accumulatedFees = accumulatedFees + fees;\\n            \\n            //KITTY token rewards\\n            uint reward = calculateTokenReward(stake.upValue, stake.downValue, pool.upValue, pool.downValue);\\n            if (token.balanceOf(address(this)) >= reward) {\\n                token.transfer(msg.sender, reward);\\n            }\\n            else {\\n                token.transfer(msg.sender, token.balanceOf(address(this)));\\n            }\\n\\n            emit betSettled(window, msg.sender, windowGain);\\n        }\\n\\n        if (totalGain >= 0) {\\n            payable(msg.sender).transfer(totalGain);\\n        }\\n\\n        if(accumulatedFees > 0) {\\n            staking.receiveFunds{value: accumulatedFees}();\\n            accumulatedFees = 0;\\n        }\\n\\n    }\\n\\n    function settleBet(uint upStake, uint downStake, uint poolUp, uint poolDown, uint8 betResult) public pure returns (uint gain, uint fees) {\\n        BetResult result = BetResult(betResult);\\n        uint poolTotal = poolUp + poolDown;\\n        if (result == BetResult.up && poolUp != 0) {\\n            //(upStake/poolUp)*poolTotal\\n            gain = sharePool(poolTotal, upStake, poolUp);\\n        } \\n\\n        else if (result == BetResult.down && poolDown != 0) {\\n            //(downStake/poolDown)*poolTotal\\n            gain = sharePool(poolTotal, downStake, poolDown);\\n        }\\n        else if (result == BetResult.tie) {\\n            gain = upStake + downStake;\\n        }\\n        else {\\n            //If the winning pool is empty, all stake goes to the fees.\\n            gain = 0;\\n            fees = upStake + downStake;\\n        }\\n    }\\n\\n   function betResult(uint256 referencePrice, uint256 settlementPrice) public pure returns(uint8){\\n        if(settlementPrice < referencePrice) {\\n            return 0;\\n        }\\n        else if(settlementPrice > referencePrice) {\\n            return 1;\\n        }\\n        return 2;\\n    }\\n\\n    function sharePool(uint value, uint shares, uint totalShares) internal pure returns (uint) {\\n        return (shares * value) / totalShares;\\n    }\\n\\n    function calculateTokenReward(uint upStake, uint downStake, uint poolUp, uint poolDown) public pure returns (uint) {\\n        uint REWARD_PER_WINDOW = 665e18;\\n        return sharePool(REWARD_PER_WINDOW, upStake + downStake, poolUp + poolDown);\\n    }\\n\\n\\n    function updatePool(uint downValue, uint upValue, uint8 side, uint value) public pure returns(uint, uint){\\n        BetSide betSide = BetSide(side);\\n        if (betSide == BetSide.down) {\\n            return (downValue + value, upValue);\\n        }\\n        if (betSide == BetSide.up) {\\n            return (downValue, upValue + value);\\n        }\\n    }\\n\\n    function getWindowNumber (uint currentBlock, uint _windowDuration, uint _firstBlock, uint _windowOffset, uint _firstWindow) public pure returns (uint windowNumber) {\\n        if (currentBlock < _firstBlock) {\\n            windowNumber = _firstWindow;\\n        }\\n        else {\\n        //n = floor((block - first_block)/window_size  + 1)\\n            windowNumber = ((currentBlock - _firstBlock) / _windowDuration) + _windowOffset + 1; //integer division => floor    \\n        }\\n\\n    }\\n\\n    function getWindowStartingBlock (uint windowNumber, uint _windowDuration, uint _firstBlock, uint _windowOffset) public pure returns (uint startingBlock) {\\n        //firstBlock + (n-1 - (offset + 1))*window_size\\n        startingBlock =  _firstBlock + (windowNumber - 1 - _windowOffset)*_windowDuration;\\n    }\\n\\n    function computeFee(uint value, uint _fee) public pure returns (uint betFee) {\\n        betFee = (value * _fee) / 100;\\n\\n    }\\n\\n\\n    function updatePrice() public {\\n        uint window = getWindowNumber(block.number, windowDuration, firstBlock, windowOffset, firstWindow);\\n        if(windowPrice[window] == 0) {\\n            windowPrice[window] = priceOracle();\\n            emit priceUpdated(window, windowPrice[window]);\\n        }\\n    }\\n\\n    function priceOracle() internal returns (uint256){\\n        (\\n             , \\n            int price,\\n             ,\\n             ,\\n             \\n        ) = priceFeed.latestRoundData();\\n        return uint256(price);\\n    }\\n\\n    //Getters\\n    function getPoolValues(uint windowNumber) public view returns (uint, uint) {\\n        Pool memory pool = pools[windowNumber];\\n        return (pool.downValue, pool.upValue);\\n    }\\n\\n    function getUserStake(uint windowNumber, address user) public view returns (uint, uint) {\\n        Pool  memory stake  = userStake[user][windowNumber];\\n        return (stake.downValue, stake.upValue);\\n    }\\n\\n\\n    function getWindowBetPrices(uint window) public view returns(uint256, uint256) {\\n        return (windowPrice[window+1], windowPrice[window+2]);\\n    }\\n\\n    function getUserBetList(address user, uint index) public view returns (uint) {\\n         return userBets[user][index];\\n    }\\n\\n    function betListLen(address user) public view returns (uint) {\\n        return userBets[user].length;\\n    }\\n}\\n\",\"keccak256\":\"0x08f84c8ee20c00e780c707ad14935f52c925a8d5e40fcc37dc1dd6b84654d8ba\",\"license\":\"UNLICENSED\"},\"contracts/BinaryStaking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\n//SPDX-License-Identifier: UNLICENSED\\ncontract BinaryStaking {\\n    IERC20 public binToken;\\n\\n    uint internal constant PRECISION_CONSTANT = 1e27;\\n    address payable owner;\\n    struct StakingAccount {\\n        uint stakedBin; \\n        uint valueWhenLastReleased; //Global accumulated value of new_rewards/total_staked when user last got rewards\\n    }\\n\\n    mapping(address => StakingAccount) public stakingBalance;\\n    uint public accumulatedRewards; //(per staked token) \\n\\n    event Staked(address indexed user, uint amount);\\n    event Unstaked(address indexed user, uint amount);\\n    event Release(address indexed user, uint amount);\\n\\n    constructor(address token) public {\\n        owner = payable(msg.sender);\\n        binToken = BinToken(token);\\n    }\\n\\n    function receiveFunds() public payable {\\n        uint value = msg.value;\\n        if (binToken.balanceOf(address(this)) != 0) {\\n            accumulatedRewards = accumulatedRewards + (value*PRECISION_CONSTANT) / binToken.balanceOf(address(this));\\n        }\\n        else {\\n            owner.transfer(value);\\n        }\\n    }\\n\\n    function stake(uint amount) external{\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        release();\\n        binToken.transferFrom(msg.sender, address(this), amount);\\n        stakingBalance[msg.sender].stakedBin = stakingBalance[msg.sender].stakedBin + amount;\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function unstake(uint amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        require(amount <= stakingBalance[msg.sender].stakedBin, \\\"Cannot unstake more than balance\\\");\\n\\n        release();\\n        stakingBalance[msg.sender].stakedBin = stakingBalance[msg.sender].stakedBin - amount;\\n\\n        binToken.transfer(msg.sender, amount);\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    function release () public {\\n        if (accumulatedRewards == 0){\\n            return;\\n        }\\n        uint amount = ownedDividends(msg.sender);\\n        stakingBalance[msg.sender].valueWhenLastReleased = accumulatedRewards;                                                        \\n        \\n        if (amount > 0) {\\n            payable(msg.sender).transfer(amount);\\n            emit Release(msg.sender, amount);\\n        }\\n    }\\n\\n    function ownedDividends(address user) public view returns(uint) {\\n        StakingAccount memory balance = stakingBalance[user];\\n        return  (balance.stakedBin * (accumulatedRewards - balance.valueWhenLastReleased)) / PRECISION_CONSTANT ;\\n    }\\n\\n\\n}\\n\\n\",\"keccak256\":\"0xa96011faec24520da6d5163519915bcf5225ee45600362c4b3affd1a5f7e912f\",\"license\":\"UNLICENSED\"}},\"version\":1}",
  "bytecode": "0x60806040526001600b553480156200001657600080fd5b5060405162002c5338038062002c5383398181016040528101906200003c919062000120565b60648211156200004b57600080fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555043600481905550826003819055508160028190555033600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600b81905550505050620001e8565b6000815190506200010381620001b4565b92915050565b6000815190506200011a81620001ce565b92915050565b6000806000606084860312156200013657600080fd5b6000620001468682870162000109565b9350506020620001598682870162000109565b92505060406200016c86828701620000f2565b9150509250925092565b600062000183826200018a565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b620001bf8162000176565b8114620001cb57600080fd5b50565b620001d981620001aa565b8114620001e557600080fd5b50565b612a5b80620001f86000396000f3fe6080604052600436106101c25760003560e01c8063849cd1c7116100f7578063ca055e5311610095578063e0d65d8711610064578063e0d65d87146106c1578063f4e0d9ac146106fe578063f52818f014610727578063f83b35fb14610750576101c2565b8063ca055e53146105f0578063daaac9d21461062e578063ddca3f431461066b578063e0a5cee314610696576101c2565b806399572d6f116100d157806399572d6f14610535578063a9559dd71461055e578063ac4afa3814610575578063b47a3566146105b3576101c2565b8063849cd1c71461047d57806389b808a7146104ba5780639626a230146104f7576101c2565b806343046844116101645780635c11ff7a1161013e5780635c11ff7a146103d3578063673a7e28146103fe5780638068aa68146104155780638096266814610452576101c2565b8063430468441461034f578063576fe42f1461036b578063587f5ed7146103a8576101c2565b8063231b0268116101a0578063231b02681461028057806326a4e8d2146102ab5780632ff284c2146102d45780633937ea4f14610311576101c2565b80630ed6ca29146101c75780630eff4d88146102055780631bb5abf914610243575b600080fd5b3480156101d357600080fd5b506101ee60048036038101906101e99190612350565b61078e565b6040516101fc92919061270b565b60405180910390f35b34801561021157600080fd5b5061022c60048036038101906102279190612135565b6108fb565b60405161023a92919061270b565b60405180910390f35b34801561024f57600080fd5b5061026a600480360381019061026591906121c3565b610948565b604051610277919061275d565b60405180910390f35b34801561028c57600080fd5b50610295610977565b6040516102a291906126f0565b60405180910390f35b3480156102b757600080fd5b506102d260048036038101906102cd91906120a7565b61097d565b005b3480156102e057600080fd5b506102fb60048036038101906102f691906121c3565b610ab5565b60405161030891906126f0565b60405180910390f35b34801561031d57600080fd5b50610338600480360381019061033391906120d0565b610ad7565b60405161034692919061270b565b60405180910390f35b610369600480360381019061036491906123b3565b610b08565b005b34801561037757600080fd5b50610392600480360381019061038d9190612262565b610ed0565b60405161039f91906126f0565b60405180910390f35b3480156103b457600080fd5b506103bd610f1c565b6040516103ca91906126f0565b60405180910390f35b3480156103df57600080fd5b506103e8610f22565b6040516103f591906126f0565b60405180910390f35b34801561040a57600080fd5b50610413610f28565b005b34801561042157600080fd5b5061043c600480360381019061043791906120d0565b610fcb565b60405161044991906126f0565b60405180910390f35b34801561045e57600080fd5b50610467610ffc565b60405161047491906126f0565b60405180910390f35b34801561048957600080fd5b506104a4600480360381019061049f91906121ff565b611002565b6040516104b191906126f0565b60405180910390f35b3480156104c657600080fd5b506104e160048036038101906104dc91906120a7565b61103c565b6040516104ee91906126f0565b60405180910390f35b34801561050357600080fd5b5061051e60048036038101906105199190612187565b611088565b60405161052c92919061270b565b60405180910390f35b34801561054157600080fd5b5061055c600480360381019061055791906120a7565b611114565b005b34801561056a57600080fd5b506105736111e8565b005b34801561058157600080fd5b5061059c60048036038101906105979190612135565b611959565b6040516105aa92919061270b565b60405180910390f35b3480156105bf57600080fd5b506105da60048036038101906105d591906120d0565b61197d565b6040516105e791906126f0565b60405180910390f35b3480156105fc57600080fd5b50610617600480360381019061061291906122d9565b611a09565b60405161062592919061270b565b60405180910390f35b34801561063a57600080fd5b50610655600480360381019061065091906121ff565b611c38565b60405161066291906126f0565b60405180910390f35b34801561067757600080fd5b50610680611c73565b60405161068d91906126f0565b60405180910390f35b3480156106a257600080fd5b506106ab611c79565b6040516106b891906126f0565b60405180910390f35b3480156106cd57600080fd5b506106e860048036038101906106e39190612135565b611c7f565b6040516106f591906126f0565b60405180910390f35b34801561070a57600080fd5b50610725600480360381019061072091906120a7565b611c97565b005b34801561073357600080fd5b5061074e60048036038101906107499190612135565b611dcf565b005b34801561075c57600080fd5b5061077760048036038101906107729190612135565b611ef8565b60405161078592919061270b565b60405180910390f35b60008060008460ff1660018111156107cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b90506000600181111561080b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b816001811115610844577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156108615783876108569190612789565b8692509250506108f2565b60018081111561089a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b8160018111156108d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b14156108f0578684876108e69190612789565b92509250506108f2565b505b94509492505050565b600080600060096000858152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050806000015181602001519250925050915091565b60008282101561095b5760009050610971565b8282111561096c5760019050610971565b600290505b92915050565b60045481565b600073ffffffffffffffffffffffffffffffffffffffff16600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610a0e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a0590612650565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600060648284610ac59190612810565b610acf91906127df565b905092915050565b600e602052816000526040600020602052806000526040600020600091509150508060000154908060010154905082565b60003411610b4b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4290612670565b60405180910390fd5b610b53610f28565b610b5b6111e8565b6000610b6934600254610ab5565b905080600d54610b799190612789565b600d8190555060008134610b8d919061286a565b90506000610ba643600354600454600c54600b54610ed0565b9050601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082815260200190815260200160002060009054906101000a900460ff16610cda57600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190806001815401808255809150506001900390600052602060002001600090919091909150556001601060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600083815260200190815260200160002060006101000a81548160ff0219169083151502179055505b600060096000838152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050600080610d2783600001518460200151898861078e565b915091506040518060400160405280838152602001828152506009600086815260200190815260200160002060008201518160000155602082015181600101559050506000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000868152602001908152602001600020604051806040016040529081600082015481526020016001820154815250509050610df1816000015182602001518a8961078e565b8093508194505050604051806040016040528084815260200183815250600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206000820151816000015560208201518160010155905050843373ffffffffffffffffffffffffffffffffffffffff167f560e32e4934b84f33b228f40ddc5b9fa690426ee087005a7d979d7921d24a02b888b604051610ebe929190612734565b60405180910390a35050505050505050565b600083861015610ee257819050610f13565b600183868689610ef2919061286a565b610efc91906127df565b610f069190612789565b610f109190612789565b90505b95945050505050565b600d5481565b60035481565b6000610f3f43600354600454600c54600b54610ed0565b90506000600a6000838152602001908152602001600020541415610fc857610f65611f44565b600a600083815260200190815260200160002081905550807f7a3325b9d11ddc18edd3dff130141b6ce951061520c6b933a604bf701f3d8052600a600084815260200190815260200160002054604051610fbf91906126f0565b60405180910390a25b50565b600f6020528160005260406000208181548110610fe757600080fd5b90600052602060002001600091509150505481565b600c5481565b60008382600187611013919061286a565b61101d919061286a565b6110279190612810565b836110329190612789565b9050949350505050565b6000600f60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805490509050919050565b6000806000600e60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008681526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090508060000151816020015192509250509250929050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146111a4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161119b906126b0565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600f60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008180549050141561123e5750611957565b600080828054905090505b600081111561186b57600083600183611262919061286a565b81548110611299577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905060006112bd43600354600454600c54600b54610ed0565b90506002826112cc9190612789565b8110156112da575050611858565b6000806112e684611ef8565b9150915060008114801561130557506003846113029190612789565b83105b156113135750505050611858565b600061131f8383610948565b905060008314806113305750600082145b1561133a57600290505b876001898054905061134c919061286a565b81548110611383577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001548860018861139c919061286a565b815481106113d3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020018190555087805480611418577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590556000600e60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008781526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000600960008881526020019081526020016000206040518060400160405290816000820154815260200160018201548152505090506000806114f7846020015185600001518560200151866000015189611a09565b91509150818b6115079190612789565b9a5080600d546115179190612789565b600d81905550600061153b8560200151866000015186602001518760000151611c38565b905080600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401611599919061260c565b60206040518083038186803b1580156115b157600080fd5b505afa1580156115c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e9919061215e565b106116a357600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33836040518363ffffffff1660e01b815260040161164b929190612627565b602060405180830381600087803b15801561166557600080fd5b505af1158015611679573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061169d919061210c565b506117fe565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b815260040161173d919061260c565b60206040518083038186803b15801561175557600080fd5b505afa158015611769573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061178d919061215e565b6040518363ffffffff1660e01b81526004016117aa929190612627565b602060405180830381600087803b1580156117c457600080fd5b505af11580156117d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117fc919061210c565b505b3373ffffffffffffffffffffffffffffffffffffffff168a7f1a82fd78981b9465af4b8bd67f27607df5d873b7a978cc8cee1a65b85c2990fc8560405161184591906126f0565b60405180910390a3505050505050505050505b808061186390612913565b915050611249565b50600081106118bc573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f193505050501580156118ba573d6000803e3d6000fd5b505b6000600d54111561195457600560009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16625c33e1600d546040518263ffffffff1660e01b81526004016000604051808303818588803b15801561193257600080fd5b505af1158015611946573d6000803e3d6000fd5b50505050506000600d819055505b50505b565b60096020528060005260406000206000915090508060000154908060010154905082565b6000600f60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082815481106119f6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154905092915050565b60008060008360ff166002811115611a4a577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b905060008587611a5a9190612789565b905060016002811115611a96577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826002811115611acf577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b148015611add575060008714155b15611af457611aed818a89611ff2565b9350611c2c565b60006002811115611b2e577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826002811115611b67577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b148015611b75575060008614155b15611b8c57611b85818988611ff2565b9350611c2b565b600280811115611bc5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b826002811115611bfe577f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b1415611c17578789611c109190612789565b9350611c2a565b600093508789611c279190612789565b92505b5b5b50509550959350505050565b60008068240cba98add2c400009050611c68818688611c579190612789565b8587611c639190612789565b611ff2565b915050949350505050565b60025481565b600b5481565b600a6020528060005260406000206000915090505481565b600073ffffffffffffffffffffffffffffffffffffffff16600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614611d28576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d1f90612690565b60405180910390fd5b80600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600560006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611e5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e56906126b0565b60405180910390fd5b60008111611ea2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e99906126d0565b60405180910390fd5b6000611eb943600354600454600c54600b54610ed0565b9050611ed9600182611ecb9190612789565b600354600454600c54611002565b60048190555080600c8190555080600b81905550816003819055505050565b600080600a6000600185611f0c9190612789565b815260200190815260200160002054600a6000600286611f2c9190612789565b81526020019081526020016000205491509150915091565b60008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611fad57600080fd5b505afa158015611fc1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fe591906123dc565b5050509150508091505090565b60008184846120019190612810565b61200b91906127df565b90509392505050565b6000813590506120238161299b565b92915050565b600081519050612038816129b2565b92915050565b60008151905061204d816129c9565b92915050565b600081359050612062816129e0565b92915050565b600081519050612077816129e0565b92915050565b60008135905061208c816129f7565b92915050565b6000815190506120a181612a0e565b92915050565b6000602082840312156120b957600080fd5b60006120c784828501612014565b91505092915050565b600080604083850312156120e357600080fd5b60006120f185828601612014565b925050602061210285828601612053565b9150509250929050565b60006020828403121561211e57600080fd5b600061212c84828501612029565b91505092915050565b60006020828403121561214757600080fd5b600061215584828501612053565b91505092915050565b60006020828403121561217057600080fd5b600061217e84828501612068565b91505092915050565b6000806040838503121561219a57600080fd5b60006121a885828601612053565b92505060206121b985828601612014565b9150509250929050565b600080604083850312156121d657600080fd5b60006121e485828601612053565b92505060206121f585828601612053565b9150509250929050565b6000806000806080858703121561221557600080fd5b600061222387828801612053565b945050602061223487828801612053565b935050604061224587828801612053565b925050606061225687828801612053565b91505092959194509250565b600080600080600060a0868803121561227a57600080fd5b600061228888828901612053565b955050602061229988828901612053565b94505060406122aa88828901612053565b93505060606122bb88828901612053565b92505060806122cc88828901612053565b9150509295509295909350565b600080600080600060a086880312156122f157600080fd5b60006122ff88828901612053565b955050602061231088828901612053565b945050604061232188828901612053565b935050606061233288828901612053565b92505060806123438882890161207d565b9150509295509295909350565b6000806000806080858703121561236657600080fd5b600061237487828801612053565b945050602061238587828801612053565b93505060406123968782880161207d565b92505060606123a787828801612053565b91505092959194509250565b6000602082840312156123c557600080fd5b60006123d38482850161207d565b91505092915050565b600080600080600060a086880312156123f457600080fd5b600061240288828901612092565b95505060206124138882890161203e565b945050604061242488828901612068565b935050606061243588828901612068565b925050608061244688828901612092565b9150509295509295909350565b61245c8161289e565b82525050565b600061246f601983612778565b91507f746f6b656e206164647265737320616c726561647920736574000000000000006000830152602082019050919050565b60006124af601d83612778565b91507f4f6e6c79207374726963746c7920706f7369746976652076616c7565730000006000830152602082019050919050565b60006124ef601b83612778565b91507f7374616b696e67206164647265737320616c72656164792073657400000000006000830152602082019050919050565b600061252f602483612778565b91507f6f6e6c7920676f7665726e616e63652063616e2063616c6c2074686973206d6560008301527f74686f64000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000612595602783612778565b91507f77696e646f772073697a652073686f756c64206265207374726963746c79207060008301527f6f736974697665000000000000000000000000000000000000000000000000006020830152604082019050919050565b6125f7816128e6565b82525050565b612606816128f0565b82525050565b60006020820190506126216000830184612453565b92915050565b600060408201905061263c6000830185612453565b61264960208301846125ee565b9392505050565b6000602082019050818103600083015261266981612462565b9050919050565b60006020820190508181036000830152612689816124a2565b9050919050565b600060208201905081810360008301526126a9816124e2565b9050919050565b600060208201905081810360008301526126c981612522565b9050919050565b600060208201905081810360008301526126e981612588565b9050919050565b600060208201905061270560008301846125ee565b92915050565b600060408201905061272060008301856125ee565b61272d60208301846125ee565b9392505050565b600060408201905061274960008301856125ee565b61275660208301846125fd565b9392505050565b600060208201905061277260008301846125fd565b92915050565b600082825260208201905092915050565b6000612794826128e6565b915061279f836128e6565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038211156127d4576127d361293d565b5b828201905092915050565b60006127ea826128e6565b91506127f5836128e6565b9250826128055761280461296c565b5b828204905092915050565b600061281b826128e6565b9150612826836128e6565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561285f5761285e61293d565b5b828202905092915050565b6000612875826128e6565b9150612880836128e6565b9250828210156128935761289261293d565b5b828203905092915050565b60006128a9826128c6565b9050919050565b60008115159050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600060ff82169050919050565b600069ffffffffffffffffffff82169050919050565b600061291e826128e6565b915060008214156129325761293161293d565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6129a48161289e565b81146129af57600080fd5b50565b6129bb816128b0565b81146129c657600080fd5b50565b6129d2816128bc565b81146129dd57600080fd5b50565b6129e9816128e6565b81146129f457600080fd5b50565b612a00816128f0565b8114612a0b57600080fd5b50565b612a17816128fd565b8114612a2257600080fd5b5056fea26469706673582212208760bc03fa9ba0c88076018694238c6343378e8e96cf521978de8763d6f0a51364736f6c63430008000033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 783,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "priceFeed",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 785,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 787,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "fee",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 789,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "windowDuration",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 791,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "firstBlock",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 794,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "staking",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(BinaryStaking)2166"
      },
      {
        "astId": 796,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "stakingAddress",
        "offset": 0,
        "slot": "6",
        "type": "t_address_payable"
      },
      {
        "astId": 799,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "token",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(BinToken)761"
      },
      {
        "astId": 801,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "tokenAddress",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 806,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "pools",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_struct(Pool)780_storage)"
      },
      {
        "astId": 810,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "windowPrice",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 813,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "firstWindow",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 815,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "windowOffset",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 817,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "accumulatedFees",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 824,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "userStake",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_struct(Pool)780_storage))"
      },
      {
        "astId": 829,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "userBets",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 835,
        "contract": "contracts/BinaryBet.sol:BinaryBet",
        "label": "userBetted",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_contract(BinToken)761": {
        "encoding": "inplace",
        "label": "contract BinToken",
        "numberOfBytes": "20"
      },
      "t_contract(BinaryStaking)2166": {
        "encoding": "inplace",
        "label": "contract BinaryStaking",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_struct(Pool)780_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => struct BinaryBet.Pool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(Pool)780_storage)"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Pool)780_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BinaryBet.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)780_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pool)780_storage": {
        "encoding": "inplace",
        "label": "struct BinaryBet.Pool",
        "members": [
          {
            "astId": 777,
            "contract": "contracts/BinaryBet.sol:BinaryBet",
            "label": "downValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 779,
            "contract": "contracts/BinaryBet.sol:BinaryBet",
            "label": "upValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}