{
  "address": "0x7F1Dc399558D731Ade3935dD3c1ad9A6f128606A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_windowDuration",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fee",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "aggregator1",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "aggregator2",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "stakingContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenContract",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        }
      ],
      "name": "BetSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "NewBet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "PriceUpdated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "PRECISION_CONSTANT",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REWARD_PER_WINDOW",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "betListLen",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolDown",
          "type": "uint256"
        }
      ],
      "name": "calculateTokenReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deployTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        }
      ],
      "name": "getPoolValues",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getUserBetList",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "windowNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "getUserStake",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "getWindowBetPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "side",
          "type": "uint8"
        }
      ],
      "name": "placeBet",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "pools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "downValue",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "upValue",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "upStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "downStake",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolUp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "poolDown",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "res",
          "type": "uint8"
        }
      ],
      "name": "settleBet",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "gain",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fees",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "updateBalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updatePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "windowDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "windowPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c2bf530942624192f5601fe04c052817da0ad6d5242a97ff2f7d09e017d1aa3",
  "receipt": {
    "to": null,
    "from": "0x093e4A781365e1BF3a1170A24B152a46E679B33A",
    "contractAddress": "0x7F1Dc399558D731Ade3935dD3c1ad9A6f128606A",
    "transactionIndex": 0,
    "gasUsed": "1578380",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xa01c3fae688677d4ef428abf3073bd40d3ae141d9cfb6e2fd71c8d1fa07f811a",
    "transactionHash": "0x0c2bf530942624192f5601fe04c052817da0ad6d5242a97ff2f7d09e017d1aa3",
    "logs": [],
    "blockNumber": 32041403,
    "cumulativeGasUsed": "1578380",
    "status": 1,
    "byzantium": true
  },
  "args": [
    86400,
    2,
    "0x13e3Ee699D1909E989722E753853AE30b17e08c5",
    "0xD702DD976Fb76Fffc2D3963D037dfDae5b04E593",
    "0xedC0aD36Cd0501ADAD7bE9A39dAA824af3590320",
    "0x165DBb08de0476271714952C3C1F068693bd60D7",
    5000
  ],
  "solcInputHash": "bc724065de7df2143a09f3584d1b636a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_windowDuration\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"aggregator1\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"aggregator2\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stakingContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"}],\"name\":\"BetSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"NewBet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"PriceUpdated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"PRECISION_CONSTANT\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REWARD_PER_WINDOW\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"betListLen\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDown\",\"type\":\"uint256\"}],\"name\":\"calculateTokenReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deployTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"}],\"name\":\"getPoolValues\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getUserBetList\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"windowNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"getUserStake\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"getWindowBetPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"side\",\"type\":\"uint8\"}],\"name\":\"placeBet\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"pools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"downValue\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upValue\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"upStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"downStake\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolUp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"poolDown\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"res\",\"type\":\"uint8\"}],\"name\":\"settleBet\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"gain\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fees\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"updateBalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updatePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"windowDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"windowPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Flip.sol\":\"Flip\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals()\\n    external\\n    view\\n    returns (\\n      uint8\\n    );\\n\\n  function description()\\n    external\\n    view\\n    returns (\\n      string memory\\n    );\\n\\n  function version()\\n    external\\n    view\\n    returns (\\n      uint256\\n    );\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(\\n    uint80 _roundId\\n  )\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0xe6f5ac8c47f3b9b6135051efb9216f9ba5b312a6ecc20209b4f66a780443c328\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/BetLibrary.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nlibrary BetLibrary {\\n    //Structs and enums\\n    enum BetSide {\\n        down,\\n        up\\n    }\\n    enum BetResult {\\n        down,\\n        up,\\n        tie\\n    }\\n    enum WindowStatus {\\n        notFinalized,\\n        waitingPrice,\\n        failedUpdate,\\n        finalized\\n    }\\n\\n    struct Pool {\\n        uint256 downValue;\\n        uint256 upValue;\\n    }\\n\\n    struct User {\\n        mapping(uint256 => Pool) stake;\\n        uint256[] bets;\\n    }\\n\\n\\n\\n    function windowStatus(\\n        uint256 window,\\n        uint256 currentWindow,\\n        uint256 initialPrice,\\n        uint256 finalPrice\\n    ) public pure returns (WindowStatus status) {\\n        if (currentWindow < window + 2) {\\n            //window not yet settled\\n            return WindowStatus.notFinalized;\\n        } else if (currentWindow < window + 3 && finalPrice == 0) {\\n            //price not updated but update still possible.\\n            return WindowStatus.waitingPrice;\\n        } else if (initialPrice == 0 || finalPrice == 0) {\\n            return WindowStatus.failedUpdate;\\n        } else {\\n            return WindowStatus.finalized;\\n        }\\n    }\\n\\n    function betResultBinary(uint256 referencePrice, uint256 settlementPrice)\\n        public\\n        pure\\n        returns (uint8)\\n    {\\n        if (settlementPrice < referencePrice) {\\n            return 0;\\n        } else if (settlementPrice > referencePrice) {\\n            return 1;\\n        }\\n        return 2;\\n    }\\n\\n    function sharePool(\\n        uint256 value,\\n        uint256 shares,\\n        uint256 totalShares\\n    ) internal pure returns (uint256) {\\n        return (shares * value) / totalShares;\\n    }\\n\\n\\n    function getWindowNumber(\\n        uint256 currentTimestamp,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 windowNumber) {\\n        //n = floor((currentTimestamp - deployTimestamp)/windowDuration  + 1)\\n        windowNumber =\\n            ((currentTimestamp - _deployTimestamp) / _windowDuration)\\n            + 1; //integer division => floor\\n    }\\n\\n    function getWindowStartingTimestamp(\\n        uint256 windowNumber,\\n        uint256 _windowDuration,\\n        uint256 _deployTimestamp\\n    ) public pure returns (uint256 startingTimestamp) {\\n        //deployTimestamp + (n-1 - (offset + 1))*windowDuration\\n        startingTimestamp =\\n            _deployTimestamp +\\n            (windowNumber - 1) *\\n            _deployTimestamp;\\n    }\\n\\n    function computeFee(uint256 value, uint256 _fee)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        betFee = (value * _fee) / 100;\\n    }\\n\\n    function computeFeeCapped(uint256 value, uint256 _fee, uint cap)\\n        public\\n        pure\\n        returns (uint256 betFee)\\n    {\\n        if ( (value * _fee) / 100 < cap) {\\n            betFee = (value * _fee) / 100;\\n        }\\n        else {\\n            betFee = cap;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x100ea4efa7e8468280d5acc339ef74e13538a07fbf062ff0a72642a9afbc3d0f\",\"license\":\"Apache-2.0\"},\"contracts/BinToken.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\n\\ncontract BinToken is ERC20 {\\n    //using SafeMath for uint256;\\n\\n    string public constant NAME = \\\"KITTY\\\";\\n    string public constant SYMBOL = \\\"KITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n    uint256 public constant INITIAL_SUPPLY =\\n        100000000 * (10**uint256(DECIMALS));\\n    uint256 public constant IDO_SUPPLY =\\n        12500000 * (10**uint256(DECIMALS));\\n\\n    mapping(address => mapping(address => uint256)) allowed;\\n\\n    constructor(address ido) ERC20(NAME, SYMBOL) {\\n        _mint(ido, IDO_SUPPLY);\\n        _mint(msg.sender, INITIAL_SUPPLY - IDO_SUPPLY);\\n    }\\n}\\n\",\"keccak256\":\"0xc41bc4caa22127ea48e686a90bf656737be43cda0a8ceedb8e8e2101792243d2\",\"license\":\"Apache-2.0\"},\"contracts/BinaryStaking.sol\":{\"content\":\"// Copyright 2021 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\n\\ncontract BinaryStaking is ERC20 {\\n    string public constant NAME = \\\"Staked KITTY\\\";\\n    string public constant SYMBOL = \\\"sKITTY\\\";\\n    uint8 public constant DECIMALS = 18;\\n\\n    IERC20 public binToken;\\n\\n    uint256 internal constant PRECISION_CONSTANT = 1e27;\\n    address payable owner;\\n\\n    mapping(address => uint256) public valueWhenLastReleased;\\n    uint256 public accumulatedRewards; //(per staked token)\\n\\n    event Staked(address indexed user, uint256 amount);\\n    event Unstaked(address indexed user, uint256 amount);\\n    event Release(address indexed user, uint256 amount);\\n    event Reward(uint256 amount);\\n\\n    constructor(address token) ERC20(NAME, SYMBOL){\\n        owner = payable(msg.sender);\\n        binToken = BinToken(token);\\n    }\\n\\n    function receiveFunds() public payable {\\n        uint256 value = msg.value;\\n        if (totalSupply() != 0) {\\n            accumulatedRewards =\\n                accumulatedRewards +\\n                (value * PRECISION_CONSTANT) /\\n                totalSupply();\\n        } else {\\n            owner.transfer(value);\\n        }\\n        emit Reward(value);\\n    }\\n\\n    function stake(uint256 amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        release(msg.sender);\\n        require(binToken.transferFrom(msg.sender, address(this), amount));\\n        _mint(msg.sender, amount);\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function unstake(uint256 amount) external {\\n        require(amount > 0, \\\"Amount should be greater than 0\\\");\\n        require(\\n            amount <= balanceOf(msg.sender),\\n            \\\"Cannot unstake more than balance\\\"\\n        );\\n\\n        release(msg.sender);\\n        _burn(msg.sender, amount);\\n\\n        binToken.transfer(msg.sender, amount);\\n        emit Unstaked(msg.sender, amount);\\n    }\\n\\n    function release(address user) public {\\n        if (accumulatedRewards == 0) {\\n            return;\\n        }\\n        uint256 amount = ownedDividends(user);\\n        valueWhenLastReleased[user] = accumulatedRewards;\\n\\n        if (amount > 0) {\\n            payable(user).transfer(amount);\\n            emit Release(user, amount);\\n        }\\n    }\\n\\n    function ownedDividends(address user) public view returns (uint256) {\\n        return\\n            (balanceOf(user) *\\n                (accumulatedRewards - valueWhenLastReleased[user])) /\\n            PRECISION_CONSTANT;\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 amount)\\n        internal virtual override \\n    {\\n        super._beforeTokenTransfer(from, to, amount);\\n        release(from);\\n        release(to);\\n    }\\n}\\n\",\"keccak256\":\"0xbe4b085a8ae66d468b306b43dc0d8cae3980cccd3aeac5156580ccabd1ee97d5\",\"license\":\"Apache-2.0\"},\"contracts/Flip.sol\":{\"content\":\"// Copyright 2022 Binary Cat Ltd.\\n\\n// SPDX-License-Identifier: Apache-2.0\\n// Licensed under the Apache License, Version 2.0 (the \\\"License\\\"); you may not use\\n// this file except in compliance with the License. You may obtain a copy of the\\n// License at http://www.apache.org/licenses/LICENSE-2.0\\n\\n// Unless required by applicable law or agreed to in writing, software distributed\\n// under the License is distributed on an \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR\\n// CONDITIONS OF ANY KIND, either express or implied. See the License for the\\n// specific language governing permissions and limitations under the License.\\n\\npragma solidity ^0.8.0;\\npragma experimental ABIEncoderV2;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./BetLibrary.sol\\\";\\nimport \\\"./BinToken.sol\\\";\\nimport \\\"./BinaryStaking.sol\\\";\\n\\ncontract Flip {\\n    int256 public PRECISION_CONSTANT = 1e27;\\n    //Other contracts interactions\\n    AggregatorV3Interface internal priceFeed1;\\n    AggregatorV3Interface internal priceFeed2;\\n    BinToken immutable token;\\n    BinaryStaking immutable staking;\\n    address payable immutable stakingAddress;\\n\\n    //Betting variables\\n    uint256 public immutable REWARD_PER_WINDOW;\\n    mapping(uint256 => BetLibrary.Pool) public pools; //windowNumber => Pool\\n    uint256 public immutable fee;\\n    uint256 public immutable deployTimestamp;\\n    mapping(address => BetLibrary.User) user;\\n\\n\\n    //Window management\\n    uint256 public immutable windowDuration; //in epoch timestamp\\n    mapping(uint256 => uint256) public windowPrice; /*first price collection\\n                                                      at the window.\\n                                                     */\\n    //EVENTS\\n    event NewBet(\\n        address indexed user,\\n        uint256 indexed windowNumber,\\n        uint256 value,\\n        uint8 side\\n    );\\n    event BetSettled(\\n        uint256 indexed windowNumber,\\n        address indexed user,\\n        uint256 gain\\n    );\\n    event PriceUpdated(uint256 indexed windowNumber, uint256 price);\\n\\n    constructor(\\n        uint256 _windowDuration, \\n        uint256 _fee,\\n        address aggregator1,\\n        address aggregator2,\\n        address stakingContract,\\n        address tokenContract,\\n        uint256 reward\\n    ) {\\n        require(_fee <= 100);\\n        priceFeed1 = AggregatorV3Interface(aggregator1);\\n        priceFeed2 = AggregatorV3Interface(aggregator2);\\n        deployTimestamp = block.timestamp;\\n        windowDuration = _windowDuration;\\n\\n        fee = _fee;\\n\\n        stakingAddress = payable(stakingContract);\\n        staking = BinaryStaking(stakingAddress);\\n        token = BinToken(tokenContract);\\n\\n        REWARD_PER_WINDOW = reward * 1e18;\\n    }\\n\\n    function placeBet(uint8 side) external payable {\\n        require(msg.value > 0, \\\"Only strictly positive values\\\");\\n        updatePrice();\\n        updateBalance(msg.sender);\\n\\n        uint256 windowNumber = BetLibrary.getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            deployTimestamp\\n        );\\n\\n        BetLibrary.User storage sender = user[msg.sender];\\n        if (sender.bets.length == 0 ||\\n            windowNumber != sender.bets[sender.bets.length - 1]) {\\n            /*\\n               Only adds to the list if its the first user bet on the window.\\n               If length is zero, the code only evaluates the first condition,\\n               avoiding the possible underflow length - 1.\\n            */\\n            sender.bets.push(windowNumber);\\n        }\\n\\n        //Update the user stake and pool for the window.\\n        if (BetLibrary.BetSide(side) == BetLibrary.BetSide.up) {\\n            sender.stake[windowNumber].upValue += msg.value;\\n            pools[windowNumber].upValue += msg.value;\\n        }\\n        else {\\n            sender.stake[windowNumber].downValue += msg.value;\\n            pools[windowNumber].downValue += msg.value;\\n        }\\n\\n        emit NewBet(msg.sender, windowNumber, msg.value, side);\\n    }\\n\\n    function updateBalance(address _user) public {\\n        BetLibrary.User storage userData = user[_user];\\n        if (userData.bets.length == 0) {\\n            //No bets to settle\\n            return;\\n        }\\n\\n        uint256 totalGain = 0;\\n        uint256 totalRewards = 0;\\n        uint256 accumulatedFees = 0;\\n        for (uint256 i = userData.bets.length; i > 0; i--) {\\n            /*Maximum number of itens in list is 2, when the user bets\\n              on 2 subsequent windows and the first window is not yet settled.\\n            */\\n            uint256 window = userData.bets[i - 1];\\n            uint256 currentWindow = BetLibrary.getWindowNumber(\\n                block.timestamp,\\n                windowDuration,\\n                deployTimestamp\\n            );\\n            (\\n                uint256 referencePrice,\\n                uint256 settlementPrice\\n            ) = getWindowBetPrices(window);\\n\\n            BetLibrary.WindowStatus status = BetLibrary.windowStatus(\\n                window,\\n                currentWindow,\\n                referencePrice,\\n                settlementPrice\\n            );\\n            if (\\n                status == BetLibrary.WindowStatus.notFinalized ||\\n                status == BetLibrary.WindowStatus.waitingPrice\\n            ) {\\n                continue;\\n            }\\n\\n            uint8 result;\\n            if (status == BetLibrary.WindowStatus.finalized) {\\n                result = BetLibrary.betResultBinary(referencePrice, settlementPrice);\\n            } else if (status == BetLibrary.WindowStatus.failedUpdate) {\\n                result = 2;\\n            }\\n\\n            //Remove window from list of unsettled bets.\\n            userData.bets[i - 1] = userData.bets[\\n                userData.bets.length - 1\\n            ];\\n            userData.bets.pop();\\n\\n            BetLibrary.Pool memory stake = userData.stake[window];\\n            BetLibrary.Pool memory pool = pools[window];\\n            (uint256 windowGain, uint256 fees) = settleBet(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue,\\n                result\\n            );\\n\\n            totalGain += windowGain;\\n            accumulatedFees += fees;\\n\\n            //KITTY token rewards\\n            totalRewards += calculateTokenReward(\\n                stake.upValue,\\n                stake.downValue,\\n                pool.upValue,\\n                pool.downValue\\n            );\\n\\n            emit BetSettled(window, _user, windowGain);\\n        }\\n\\n        if (totalGain > 0) {\\n            payable(_user).transfer(totalGain);\\n        }\\n\\n        if (totalRewards > 0) {\\n            transferRewards(_user, totalRewards);\\n        }\\n\\n        if (accumulatedFees > 0) {\\n            staking.receiveFunds{value: accumulatedFees}();\\n        }\\n    }\\n\\n\\n    function transferRewards(address user, uint256 amount) internal {\\n        if (token.balanceOf(address(this)) >= amount) {\\n            token.transfer(user, amount);\\n        } else {\\n            token.transfer(user, token.balanceOf(address(this)));\\n        }\\n    }\\n\\n    function settleBet(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown,\\n        uint8 res\\n    ) public view returns (uint256 gain, uint256 fees) {\\n        BetLibrary.BetResult result = BetLibrary.BetResult(res);\\n        uint256 poolTotal = poolUp + poolDown;\\n        uint256 value;\\n        if (result == BetLibrary.BetResult.up && poolUp != 0) {\\n            //(upStake/poolUp)*poolTotal\\n            value = BetLibrary.sharePool(poolTotal, upStake, poolUp);\\n            fees = BetLibrary.computeFee(value, fee);\\n            gain = value - fees;\\n        } else if (result == BetLibrary.BetResult.down && poolDown != 0) {\\n            //(downStake/poolDown)*poolTotal\\n            value = BetLibrary.sharePool(poolTotal, downStake, poolDown);\\n            fees = BetLibrary.computeFee(value, fee);\\n            gain = value - fees;\\n        } else if (result == BetLibrary.BetResult.tie) {\\n            gain = upStake + downStake;\\n        } else {\\n            //If the winning pool is empty, all stake goes to the fees.\\n            gain = 0;\\n            fees = upStake + downStake;\\n        }\\n    }\\n\\n    function calculateTokenReward(\\n        uint256 upStake,\\n        uint256 downStake,\\n        uint256 poolUp,\\n        uint256 poolDown\\n    ) public view returns (uint256) {\\n        return\\n            BetLibrary.sharePool(\\n                REWARD_PER_WINDOW,\\n                upStake + downStake,\\n                poolUp + poolDown\\n            );\\n    }\\n\\n\\n    function updatePrice() public {\\n        uint256 window = BetLibrary.getWindowNumber(\\n            block.timestamp,\\n            windowDuration,\\n            deployTimestamp\\n        );\\n        if (windowPrice[window] == 0) {\\n            windowPrice[window] = priceOracle();\\n            emit PriceUpdated(window, windowPrice[window]);\\n        }\\n    }\\n\\n    function priceOracle() internal view returns (uint256) {\\n        (, int256 price1, , , ) = priceFeed1.latestRoundData();\\n        (, int256 price2, , , ) = priceFeed2.latestRoundData();\\n        return uint256(price1 * PRECISION_CONSTANT / price2);\\n    }\\n\\n    //Getters\\n    function getPoolValues(uint256 windowNumber)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        BetLibrary.Pool memory pool = pools[windowNumber];\\n        return (pool.downValue, pool.upValue);\\n    }\\n\\n    function getUserStake(uint256 windowNumber, address _user)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        BetLibrary.Pool memory stake = user[_user].stake[windowNumber];\\n        return (stake.downValue, stake.upValue);\\n    }\\n\\n    function getWindowBetPrices(uint256 window)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return (windowPrice[window + 1], windowPrice[window + 2]);\\n    }\\n\\n    function getUserBetList(address _user, uint256 index)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return user[_user].bets[index];\\n    }\\n\\n    function betListLen(address _user) public view returns (uint256) {\\n        return user[_user].bets.length;\\n    }\\n}\\n\",\"keccak256\":\"0xfbd1d1ea9247ecf5cf2d48a22a940543b8ee3785fbadd87d17783fdc988c673f\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x6101606040526b033b2e3c9fd0803ce80000006000553480156200002257600080fd5b5060405162001cae38038062001cae8339810160408190526200004591620000f6565b60648611156200005457600080fd5b600180546001600160a01b038088166001600160a01b031992831617909255600280549287169290911691909117905542610120526101408790526101008690526001600160601b0319606084811b821660c081905260a05283901b16608052620000c881670de0b6b3a764000062000170565b60e052506200019e95505050505050565b80516001600160a01b0381168114620000f157600080fd5b919050565b600080600080600080600060e0888a0312156200011257600080fd5b87519650602088015195506200012b60408901620000d9565b94506200013b60608901620000d9565b93506200014b60808901620000d9565b92506200015b60a08901620000d9565b915060c0880151905092959891949750929550565b60008160001904831182151516156200019957634e487b7160e01b600052601160045260246000fd5b500290565b60805160601c60a05160601c60c05160601c60e051610100516101205161014051611a6962000245600039600081816101e2015281816104e601528181610ad60152610d3a0152600081816102160152818161050c01528181610afc0152610d600152600081816103d60152610f3c01526000818161025f015261105e01526000505060006109a3015260008181611118015281816111f801526112a80152611a696000f3fe60806040526004361061010e5760003560e01c806389b808a7116100a5578063ca055e5311610074578063ddca3f4311610059578063ddca3f43146103c4578063e0d65d87146103f8578063f83b35fb1461042557600080fd5b8063ca055e5314610384578063daaac9d2146103a457600080fd5b806389b808a7146102815780639626a230146102c7578063ac4afa3814610330578063b47a35661461036457600080fd5b80635c11ff7a116100e15780635c11ff7a146101d0578063607ad0d714610204578063673a7e281461023857806371a422071461024d57600080fd5b80630eff4d88146101135780633f63e7631461017757806340b8405a1461019b57806343046844146101bd575b600080fd5b34801561011f57600080fd5b5061015d61012e366004611527565b600090815260036020908152604091829020825180840190935280548084526001909101549290910182905291565b604080519283526020830191909152015b60405180910390f35b34801561018357600080fd5b5061018d60005481565b60405190815260200161016e565b3480156101a757600080fd5b506101bb6101b6366004611569565b610445565b005b6101bb6101cb36600461159a565b610a29565b3480156101dc57600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021057600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024457600080fd5b506101bb610d0c565b34801561025957600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561028d57600080fd5b5061018d61029c366004611569565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090206001015490565b3480156102d357600080fd5b5061015d6102e23660046115b7565b73ffffffffffffffffffffffffffffffffffffffff16600090815260046020908152604080832093835292815290829020825180840190935280548084526001909101549290910182905291565b34801561033c57600080fd5b5061015d61034b366004611527565b6003602052600090815260409020805460019091015482565b34801561037057600080fd5b5061018d61037f3660046115e3565b610e64565b34801561039057600080fd5b5061015d61039f36600461160d565b610eb1565b3480156103b057600080fd5b5061018d6103bf36600461165a565b611057565b3480156103d057600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561040457600080fd5b5061018d610413366004611527565b60056020526000908152604090205481565b34801561043157600080fd5b5061015d610440366004611527565b61109f565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090206001810154610477575050565b6001810154600090819081905b801561093f5760008560010160018361049d91906116bb565b815481106104ad576104ad6116d2565b60009182526020822001546040517f508ba0bd0000000000000000000000000000000000000000000000000000000081524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f00000000000000000000000000000000000000000000000000000000000000006044820152909250734FD485BDe06220397Ce775A4f5029d384aa03B3E9063508ba0bd9060640160206040518083038186803b15801561056a57600080fd5b505af415801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190611701565b90506000806105b08461109f565b6040517fb134894e000000000000000000000000000000000000000000000000000000008152600481018790526024810186905260448101839052606481018290529193509150600090734FD485BDe06220397Ce775A4f5029d384aa03B3E9063b134894e9060840160206040518083038186803b15801561063157600080fd5b505af4158015610645573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610669919061171a565b9050600081600381111561067f5761067f61173b565b148061069c5750600181600381111561069a5761069a61173b565b145b156106ab57505050505061092d565b600060038260038111156106c1576106c161173b565b1415610771576040517fc886d8a40000000000000000000000000000000000000000000000000000000081526004810185905260248101849052734FD485BDe06220397Ce775A4f5029d384aa03B3E9063c886d8a49060440160206040518083038186803b15801561073257600080fd5b505af4158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a919061176a565b905061078f565b60028260038111156107855761078561173b565b141561078f575060025b6001808c01805490916107a1916116bb565b815481106107b1576107b16116d2565b90600052602060002001548b6001016001896107cd91906116bb565b815481106107dd576107dd6116d2565b60009182526020909120015560018b018054806107fc576107fc611787565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558782528c8152604080832081518083018352815481526001918201548185019081528b8652600385528386208451808601909552805480865293015494840185905251815191959394849361088c93919089610eb1565b909250905061089b828f6117b6565b9d506108a7818d6117b6565b9b506108c58460200151856000015185602001518660000151611057565b6108cf908e6117b6565b9c508f73ffffffffffffffffffffffffffffffffffffffff168a7f6f277b50171c654e40c771d9c2bbf19e070eeb21cce6f8e9a80334564279e3958460405161091a91815260200190565b60405180910390a3505050505050505050505b80610937816117ce565b915050610484565b50821561098b5760405173ffffffffffffffffffffffffffffffffffffffff86169084156108fc029085906000818181858888f19350505050158015610989573d6000803e3d6000fd5b505b811561099b5761099b85836110e8565b8015610a22577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16625c33e1826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b50505050505b5050505050565b60003411610a97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207374726963746c7920706f7369746976652076616c756573000000604482015260640160405180910390fd5b610a9f610d0c565b610aa833610445565b6040517f508ba0bd0000000000000000000000000000000000000000000000000000000081524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f00000000000000000000000000000000000000000000000000000000000000006044820152600090734FD485BDe06220397Ce775A4f5029d384aa03B3E9063508ba0bd9060640160206040518083038186803b158015610b5a57600080fd5b505af4158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190611701565b3360009081526004602052604090206001810154919250901580610be25750600180820180549091610bc3916116bb565b81548110610bd357610bd36116d2565b90600052602060002001548214155b15610c0157600180820180549182018155600090815260209020018290555b60018360ff166001811115610c1857610c1861173b565b6001811115610c2957610c2961173b565b1415610c815760008281526020829052604081206001018054349290610c509084906117b6565b909155505060008281526003602052604081206001018054349290610c769084906117b6565b90915550610cc89050565b60008281526020829052604081208054349290610c9f9084906117b6565b909155505060008281526003602052604081208054349290610cc29084906117b6565b90915550505b6040805134815260ff85166020820152839133917f85ff162f60a0eab11e1e0d3d9cfa18a46d7038a29751af4130dbaeeadbd37ed4910160405180910390a3505050565b6040517f508ba0bd0000000000000000000000000000000000000000000000000000000081524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f00000000000000000000000000000000000000000000000000000000000000006044820152600090734FD485BDe06220397Ce775A4f5029d384aa03B3E9063508ba0bd9060640160206040518083038186803b158015610dbe57600080fd5b505af4158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df69190611701565b600081815260056020526040902054909150610e6157610e14611397565b600082815260056020526040908190208290555182917f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd69683891610e5891815260200190565b60405180910390a25b50565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260408120600101805483908110610e9e57610e9e6116d2565b9060005260206000200154905092915050565b60008060008360ff166002811115610ecb57610ecb61173b565b90506000610ed986886117b6565b905060006001836002811115610ef157610ef161173b565b148015610efd57508715155b15610fe557610f0d828b8a611508565b6040517f2ff284c2000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006024820152909150734FD485BDe06220397Ce775A4f5029d384aa03B3E90632ff284c29060440160206040518083038186803b158015610f9a57600080fd5b505af4158015610fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd29190611701565b9350610fde84826116bb565b945061104a565b6000836002811115610ff957610ff961173b565b14801561100557508615155b1561101557610f0d828a89611508565b60028360028111156110295761102961173b565b141561103957610fde898b6117b6565b60009450611047898b6117b6565b93505b5050509550959350505050565b60006110967f000000000000000000000000000000000000000000000000000000000000000061108786886117b6565b61109185876117b6565b611508565b95945050505050565b6000806005816110b08560016117b6565b815260200190815260200160002054600560008560026110d091906117b6565b81526020019081526020016000205491509150915091565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015281907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190611701565b1061127a576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b602060405180830381600087803b15801561123d57600080fd5b505af1158015611251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112759190611803565b505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190611701565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401611223565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561140257600080fd5b505afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a919061183f565b5050509150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156114aa57600080fd5b505afa1580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e2919061183f565b50505091505080600054836114f7919061188f565b611501919061197a565b9250505090565b60008161151585856119e2565b61151f9190611a1f565b949350505050565b60006020828403121561153957600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461156457600080fd5b919050565b60006020828403121561157b57600080fd5b61158482611540565b9392505050565b60ff81168114610e6157600080fd5b6000602082840312156115ac57600080fd5b81356115848161158b565b600080604083850312156115ca57600080fd5b823591506115da60208401611540565b90509250929050565b600080604083850312156115f657600080fd5b6115ff83611540565b946020939093013593505050565b600080600080600060a0868803121561162557600080fd5b85359450602086013593506040860135925060608601359150608086013561164c8161158b565b809150509295509295909350565b6000806000806080858703121561167057600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156116cd576116cd61168c565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561171357600080fd5b5051919050565b60006020828403121561172c57600080fd5b81516004811061158457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561177c57600080fd5b81516115848161158b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082198211156117c9576117c961168c565b500190565b6000816117dd576117dd61168c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561181557600080fd5b8151801515811461158457600080fd5b805169ffffffffffffffffffff8116811461156457600080fd5b600080600080600060a0868803121561185757600080fd5b61186086611825565b945060208601519350604086015192506060860151915061188360808701611825565b90509295509295909350565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156118d0576118d061168c565b7f8000000000000000000000000000000000000000000000000000000000000000600087128682058812818416161561190b5761190b61168c565b600087129250878205871284841616156119275761192761168c565b8785058712818416161561193d5761193d61168c565b505050929093029392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826119895761198961194b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156119dd576119dd61168c565b500590565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a1a57611a1a61168c565b500290565b600082611a2e57611a2e61194b565b50049056fea2646970667358221220e8e779dc0a98b1cc3ff1c3f31ed0abc3cf5623b5b84f07d54d3486ef08aeab6964736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061010e5760003560e01c806389b808a7116100a5578063ca055e5311610074578063ddca3f4311610059578063ddca3f43146103c4578063e0d65d87146103f8578063f83b35fb1461042557600080fd5b8063ca055e5314610384578063daaac9d2146103a457600080fd5b806389b808a7146102815780639626a230146102c7578063ac4afa3814610330578063b47a35661461036457600080fd5b80635c11ff7a116100e15780635c11ff7a146101d0578063607ad0d714610204578063673a7e281461023857806371a422071461024d57600080fd5b80630eff4d88146101135780633f63e7631461017757806340b8405a1461019b57806343046844146101bd575b600080fd5b34801561011f57600080fd5b5061015d61012e366004611527565b600090815260036020908152604091829020825180840190935280548084526001909101549290910182905291565b604080519283526020830191909152015b60405180910390f35b34801561018357600080fd5b5061018d60005481565b60405190815260200161016e565b3480156101a757600080fd5b506101bb6101b6366004611569565b610445565b005b6101bb6101cb36600461159a565b610a29565b3480156101dc57600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561021057600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561024457600080fd5b506101bb610d0c565b34801561025957600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561028d57600080fd5b5061018d61029c366004611569565b73ffffffffffffffffffffffffffffffffffffffff1660009081526004602052604090206001015490565b3480156102d357600080fd5b5061015d6102e23660046115b7565b73ffffffffffffffffffffffffffffffffffffffff16600090815260046020908152604080832093835292815290829020825180840190935280548084526001909101549290910182905291565b34801561033c57600080fd5b5061015d61034b366004611527565b6003602052600090815260409020805460019091015482565b34801561037057600080fd5b5061018d61037f3660046115e3565b610e64565b34801561039057600080fd5b5061015d61039f36600461160d565b610eb1565b3480156103b057600080fd5b5061018d6103bf36600461165a565b611057565b3480156103d057600080fd5b5061018d7f000000000000000000000000000000000000000000000000000000000000000081565b34801561040457600080fd5b5061018d610413366004611527565b60056020526000908152604090205481565b34801561043157600080fd5b5061015d610440366004611527565b61109f565b73ffffffffffffffffffffffffffffffffffffffff811660009081526004602052604090206001810154610477575050565b6001810154600090819081905b801561093f5760008560010160018361049d91906116bb565b815481106104ad576104ad6116d2565b60009182526020822001546040517f508ba0bd0000000000000000000000000000000000000000000000000000000081524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f0000000000000000000000000000000000000000000000000000000000000000604482015290925073__$686c523504a9e378bd393220b2fc4a35a6$__9063508ba0bd9060640160206040518083038186803b15801561056a57600080fd5b505af415801561057e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105a29190611701565b90506000806105b08461109f565b6040517fb134894e00000000000000000000000000000000000000000000000000000000815260048101879052602481018690526044810183905260648101829052919350915060009073__$686c523504a9e378bd393220b2fc4a35a6$__9063b134894e9060840160206040518083038186803b15801561063157600080fd5b505af4158015610645573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610669919061171a565b9050600081600381111561067f5761067f61173b565b148061069c5750600181600381111561069a5761069a61173b565b145b156106ab57505050505061092d565b600060038260038111156106c1576106c161173b565b1415610771576040517fc886d8a4000000000000000000000000000000000000000000000000000000008152600481018590526024810184905273__$686c523504a9e378bd393220b2fc4a35a6$__9063c886d8a49060440160206040518083038186803b15801561073257600080fd5b505af4158015610746573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076a919061176a565b905061078f565b60028260038111156107855761078561173b565b141561078f575060025b6001808c01805490916107a1916116bb565b815481106107b1576107b16116d2565b90600052602060002001548b6001016001896107cd91906116bb565b815481106107dd576107dd6116d2565b60009182526020909120015560018b018054806107fc576107fc611787565b6000828152602080822083017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9081018390559092019092558782528c8152604080832081518083018352815481526001918201548185019081528b8652600385528386208451808601909552805480865293015494840185905251815191959394849361088c93919089610eb1565b909250905061089b828f6117b6565b9d506108a7818d6117b6565b9b506108c58460200151856000015185602001518660000151611057565b6108cf908e6117b6565b9c508f73ffffffffffffffffffffffffffffffffffffffff168a7f6f277b50171c654e40c771d9c2bbf19e070eeb21cce6f8e9a80334564279e3958460405161091a91815260200190565b60405180910390a3505050505050505050505b80610937816117ce565b915050610484565b50821561098b5760405173ffffffffffffffffffffffffffffffffffffffff86169084156108fc029085906000818181858888f19350505050158015610989573d6000803e3d6000fd5b505b811561099b5761099b85836110e8565b8015610a22577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16625c33e1826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610a0857600080fd5b505af1158015610a1c573d6000803e3d6000fd5b50505050505b5050505050565b60003411610a97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c79207374726963746c7920706f7369746976652076616c756573000000604482015260640160405180910390fd5b610a9f610d0c565b610aa833610445565b6040517f508ba0bd0000000000000000000000000000000000000000000000000000000081524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f0000000000000000000000000000000000000000000000000000000000000000604482015260009073__$686c523504a9e378bd393220b2fc4a35a6$__9063508ba0bd9060640160206040518083038186803b158015610b5a57600080fd5b505af4158015610b6e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b929190611701565b3360009081526004602052604090206001810154919250901580610be25750600180820180549091610bc3916116bb565b81548110610bd357610bd36116d2565b90600052602060002001548214155b15610c0157600180820180549182018155600090815260209020018290555b60018360ff166001811115610c1857610c1861173b565b6001811115610c2957610c2961173b565b1415610c815760008281526020829052604081206001018054349290610c509084906117b6565b909155505060008281526003602052604081206001018054349290610c769084906117b6565b90915550610cc89050565b60008281526020829052604081208054349290610c9f9084906117b6565b909155505060008281526003602052604081208054349290610cc29084906117b6565b90915550505b6040805134815260ff85166020820152839133917f85ff162f60a0eab11e1e0d3d9cfa18a46d7038a29751af4130dbaeeadbd37ed4910160405180910390a3505050565b6040517f508ba0bd0000000000000000000000000000000000000000000000000000000081524260048201527f000000000000000000000000000000000000000000000000000000000000000060248201527f0000000000000000000000000000000000000000000000000000000000000000604482015260009073__$686c523504a9e378bd393220b2fc4a35a6$__9063508ba0bd9060640160206040518083038186803b158015610dbe57600080fd5b505af4158015610dd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610df69190611701565b600081815260056020526040902054909150610e6157610e14611397565b600082815260056020526040908190208290555182917f945c1c4e99aa89f648fbfe3df471b916f719e16d960fcec0737d4d56bd69683891610e5891815260200190565b60405180910390a25b50565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600460205260408120600101805483908110610e9e57610e9e6116d2565b9060005260206000200154905092915050565b60008060008360ff166002811115610ecb57610ecb61173b565b90506000610ed986886117b6565b905060006001836002811115610ef157610ef161173b565b148015610efd57508715155b15610fe557610f0d828b8a611508565b6040517f2ff284c2000000000000000000000000000000000000000000000000000000008152600481018290527f0000000000000000000000000000000000000000000000000000000000000000602482015290915073__$686c523504a9e378bd393220b2fc4a35a6$__90632ff284c29060440160206040518083038186803b158015610f9a57600080fd5b505af4158015610fae573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fd29190611701565b9350610fde84826116bb565b945061104a565b6000836002811115610ff957610ff961173b565b14801561100557508615155b1561101557610f0d828a89611508565b60028360028111156110295761102961173b565b141561103957610fde898b6117b6565b60009450611047898b6117b6565b93505b5050509550959350505050565b60006110967f000000000000000000000000000000000000000000000000000000000000000061108786886117b6565b61109185876117b6565b611508565b95945050505050565b6000806005816110b08560016117b6565b815260200190815260200160002054600560008560026110d091906117b6565b81526020019081526020016000205491509150915091565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015281907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a082319060240160206040518083038186803b15801561116f57600080fd5b505afa158015611183573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111a79190611701565b1061127a576040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044015b602060405180830381600087803b15801561123d57600080fd5b505af1158015611251573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112759190611803565b505050565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063a9059cbb90849083906370a082319060240160206040518083038186803b15801561130957600080fd5b505afa15801561131d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113419190611701565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401611223565b600080600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561140257600080fd5b505afa158015611416573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143a919061183f565b5050509150506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b1580156114aa57600080fd5b505afa1580156114be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114e2919061183f565b50505091505080600054836114f7919061188f565b611501919061197a565b9250505090565b60008161151585856119e2565b61151f9190611a1f565b949350505050565b60006020828403121561153957600080fd5b5035919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461156457600080fd5b919050565b60006020828403121561157b57600080fd5b61158482611540565b9392505050565b60ff81168114610e6157600080fd5b6000602082840312156115ac57600080fd5b81356115848161158b565b600080604083850312156115ca57600080fd5b823591506115da60208401611540565b90509250929050565b600080604083850312156115f657600080fd5b6115ff83611540565b946020939093013593505050565b600080600080600060a0868803121561162557600080fd5b85359450602086013593506040860135925060608601359150608086013561164c8161158b565b809150509295509295909350565b6000806000806080858703121561167057600080fd5b5050823594602084013594506040840135936060013592509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000828210156116cd576116cd61168c565b500390565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60006020828403121561171357600080fd5b5051919050565b60006020828403121561172c57600080fd5b81516004811061158457600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60006020828403121561177c57600080fd5b81516115848161158b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600082198211156117c9576117c961168c565b500190565b6000816117dd576117dd61168c565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60006020828403121561181557600080fd5b8151801515811461158457600080fd5b805169ffffffffffffffffffff8116811461156457600080fd5b600080600080600060a0868803121561185757600080fd5b61186086611825565b945060208601519350604086015192506060860151915061188360808701611825565b90509295509295909350565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156118d0576118d061168c565b7f8000000000000000000000000000000000000000000000000000000000000000600087128682058812818416161561190b5761190b61168c565b600087129250878205871284841616156119275761192761168c565b8785058712818416161561193d5761193d61168c565b505050929093029392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826119895761198961194b565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f8000000000000000000000000000000000000000000000000000000000000000831416156119dd576119dd61168c565b500590565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611a1a57611a1a61168c565b500290565b600082611a2e57611a2e61194b565b50049056fea2646970667358221220e8e779dc0a98b1cc3ff1c3f31ed0abc3cf5623b5b84f07d54d3486ef08aeab6964736f6c63430008080033",
  "libraries": {
    "BetLibrary": "0x4FD485BDe06220397Ce775A4f5029d384aa03B3E"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3780,
        "contract": "contracts/Flip.sol:Flip",
        "label": "PRECISION_CONSTANT",
        "offset": 0,
        "slot": "0",
        "type": "t_int256"
      },
      {
        "astId": 3783,
        "contract": "contracts/Flip.sol:Flip",
        "label": "priceFeed1",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3786,
        "contract": "contracts/Flip.sol:Flip",
        "label": "priceFeed2",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      },
      {
        "astId": 3801,
        "contract": "contracts/Flip.sol:Flip",
        "label": "pools",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(Pool)1503_storage)"
      },
      {
        "astId": 3810,
        "contract": "contracts/Flip.sol:Flip",
        "label": "user",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_struct(User)1512_storage)"
      },
      {
        "astId": 3816,
        "contract": "contracts/Flip.sol:Flip",
        "label": "windowPrice",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(User)1512_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BetLibrary.User)",
        "numberOfBytes": "32",
        "value": "t_struct(User)1512_storage"
      },
      "t_mapping(t_uint256,t_struct(Pool)1503_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BetLibrary.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)1503_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(Pool)1503_storage": {
        "encoding": "inplace",
        "label": "struct BetLibrary.Pool",
        "members": [
          {
            "astId": 1500,
            "contract": "contracts/Flip.sol:Flip",
            "label": "downValue",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1502,
            "contract": "contracts/Flip.sol:Flip",
            "label": "upValue",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(User)1512_storage": {
        "encoding": "inplace",
        "label": "struct BetLibrary.User",
        "members": [
          {
            "astId": 1508,
            "contract": "contracts/Flip.sol:Flip",
            "label": "stake",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_uint256,t_struct(Pool)1503_storage)"
          },
          {
            "astId": 1511,
            "contract": "contracts/Flip.sol:Flip",
            "label": "bets",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_uint256)dyn_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}